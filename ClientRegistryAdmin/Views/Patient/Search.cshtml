@model ClientRegistryAdmin.Models.PatientSearchModel
@{
    ViewBag.Title = "Patient Administration";
    Layout = "~/Views/Shared/_PatientLayout.cshtml";
}

@section PatientView
{
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Patient Search</h3>
        </div>
        <div class="panel-body">
            @using (Html.BeginForm("Search", "Patient", FormMethod.Get, new { @class = "form-horizontal" }))
            {
                Html.EnableClientValidation();
                @Html.HiddenFor(m => m.WasSubmitted)
                @Html.ValidationSummary()
                <div class="container-fluid">
                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.FamilyName) 
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(m => m.FamilyName, new { @class = "form-control" })
                        </div>
                        <div class="col-md-1">
                            <span class="glyphicon-question-sign glyphicon" data-toggle="tooltip" data-placement="left" title="The family name of the patient. May use wildcards (SM*). Matches may be based on phonetic matches or name variants if configured (example: Connell may match McConnell and O'Connell')"></span>
                            @Html.ValidationMessageFor(m => m.FamilyName)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.GivenName)
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(m => m.GivenName, new { @class = "form-control" })

                        </div>
                        <div class="col-md-1">
                            @Html.ValidationMessageFor(m => m.GivenName)
                            <span class="glyphicon-question-sign glyphicon" data-toggle="tooltip" data-placement="left" title="The given name of the patient. May use wildcards (JO*). Matches may be based on phonetic matches or name variants if configured (example: John matches Johnny and Johnathon)"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.DateOfBirth)
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(m => m.DateOfBirth, new { @class = "datepicker datepicker-pointer form-control", @id = "dateOfBirth" })
                        </div>
                        <div class="col-md-1">
                            <span class="glyphicon-question-sign glyphicon" data-toggle="tooltip" data-placement="left" title="Date of birth or range in format (YYYYMMDD). Examples: 2015 matches anyone born in 2015, 201501 matches anyone born in January 2015 and 20150101 matches anyone born on January 1, 2015"></span>

                            @Html.ValidationMessageFor(m => m.DateOfBirth)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.Identifier)
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(m => m.Identifier, new { @class = "form-control" })
                        </div>
                        <div class="col-md-1">
                            <span class="glyphicon-question-sign glyphicon" data-toggle="tooltip" data-placement="left" title="Matches any identifier of a patient regardless of domain"></span>

                            @Html.ValidationMessageFor(m => m.Identifier)
                        </div>
                    </div>
                    <button class="btn btn-primary" style="float:right"><span class="glyphicon glyphicon-search"></span> Search</button>
                </div>
            }

            @if (Model.IsError)
            {
                <div class="alert alert-danger">
                    An error occurred executing the search against the Client Registry
                </div>
            }
            else if (Model.Outcome != null)
            {
                var grid = new System.Web.Helpers.WebGrid(Model.Outcome, canSort: false, rowsPerPage: 10, selectionFieldName: "Id");
                grid.Pager(WebGridPagerModes.All, "First", "Previous", "Next", "Last");

                @grid.GetHtml(
            tableStyle: "table table-striped",
            mode: WebGridPagerModes.All,
            footerStyle: "grid-footer",
            headerStyle: "grid-header",
            htmlAttributes: new { id = "resultTable" },
            columns: grid.Columns(
            grid.Column(
            columnName: "Id",
            header: "ECID",
            style: "width:20%",
            format: item => Html.ActionLink((String)item.Id.ToString(), "View", "Patient", new { id = item.RegistrationId }, new object())
            ),
            grid.Column(
            columnName: "Name",
            header: "Name",
            style: "width:30%",
                        format: item => new HtmlString((String)String.Format("{0}, {1}", item.FamilyName, item.GivenName))
                ),
                grid.Column(
                    columnName: "DateOfBirth",
                header: "DOB",
                style: "width:30%",
                    format: item => new HtmlString((String)item.DateOfBirth.ToString("yyyy-MMM-dd"))
                    ),
                    grid.Column(
                columnName: "Gender",
                header: "Gender",
                style: "width:10%"
                ),
                grid.Column(
                columnName: "Address",
                header: "Address",
                style: "width:30%",
                    format: item => new HtmlString(String.Format("{0}, {1}", item.City, item.State))
                )
            )
        )
    <div class="row">
        <div class="col-md-12">
            <strong>Total Records:</strong> @String.Format("{0:#,###,###} results", Model.Outcome.Length)
        </div>
    </div>

            }
        </div>
    </div>
}
