/**
 * POSTGRECR - MARC-HI CLIENT REGISTRY MERGE FUNCTIONS FOR POSTGRESQL
 * VERSION: 2.0
 * AUTHOR: JUSTIN FYFE
 * DATE: MARCH 17, 2013
 * DESCRIPTION:
 *	THIS FILE CLEANS AND CREATES THE PORTIONS OF THE CLIENT REGISTRY SCHEMA NECESSARY FOR 
 *	PERFORMING MERGES
 *
 * LICENSE:
 * 	Licensed under the Apache License, Version 2.0 (the "License");
 * 	you may not use this file except in compliance with the License.
 * 	You may obtain a copy of the License at
 *
 *     		http://www.apache.org/licenses/LICENSE-2.0
 *
 * 	Unless required by applicable law or agreed to in writing, software
 * 	distributed under the License is distributed on an "AS IS" BASIS,
 * 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 	See the License for the specific language governing permissions and
 * 	limitations under the License.
 */


-- @TABLE
-- REGISTRATION EVENT MERGE CANDIDATE TABLE
-- 	THIS TABLE STORES LINKS BETWEEN HSR EVENTS WHICH CONTAIN CLIENTS WHO ARE
--	CANDIDATES FOR A MATCH. THIS MAY BE FOR SEVERAL REASONS THAT A LINK IS MADE:
--		1. THERE WERE MORE THAN ONE POTENTIAL MATCH ON REGISTRATION
--		2. THE CONFIGURATION DIDN'T ALLOW FOR AUTO-MATCHING
--		3. THE CONFIGURATION DIDN'T ALLOW FOR UPDATE IF EXISTS
--
CREATE TABLE HSR_MRG_CAND_TBL
(
	HSR_ID			NUMERIC(20,0) NOT NULL, -- THE IDENTIFIER OF THE HEALTH SERVICE RECORD EVENT WHICH CONTAINS THE RECORDED PERSON
	CAND_HSR_ID		NUMERIC(20,0) NOT NULL, -- THE CANDIDATE RECORD THAT MATCHES
	EFFT_VRSN_ID		NUMERIC(20,0) NOT NULL, -- THE VERSION THAT THE DUPLICATE WAS DETECTED
	CAND_VRSN_ID		NUMERIC(20,0) NOT NULL, -- VERSION IDENTIFIER OF THE CANDIDATE
	RSLV_VRSN_ID		NUMERIC(20,0), -- THE HSR VERSION ID THAT RESOLVES THIS CONFLICT (MAY BE A NEW VERSION OF THE SAME OR OTHER ID)
	CRT_UTC			TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- TIMESTAMP DUPLICATE WAS DETECTED
	OBSLT_UTC		TIMESTAMPTZ, -- TIMESTAMP DUPLICATE WAS RESOLVED
	RSLV_OUTC_CS		CHAR(3),
	CONSTRAINT PK_HSR_MRG_CAND_TBL PRIMARY KEY (HSR_ID, CAND_HSR_ID),
	CONSTRAINT FK_HSR_MRG_CAND_HSR_ID_HSR_TBL FOREIGN KEY (HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_HSR_MRG_CAND_CAND_HSR_ID_HSR_TBL FOREIGN KEY (CAND_HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_HSR_MRG_CAND_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES HSR_VRSN_TBL(HSR_VRSN_ID),
	CONSTRAINT FK_HSR_MRG_CAND_RSLV_VRSN_TBL FOREIGN KEY (RSLV_VRSN_ID) REFERENCES HSR_VRSN_TBL(HSR_VRSN_ID)
);

-- @FUNCTION
-- CREATE A MERGE CANDIDATE RECORD
CREATE OR REPLACE FUNCTION CRT_MRG_CAND
(
	HSR_ID_IN	IN NUMERIC,
	CAND_HSR_ID_IN	IN NUMERIC
) RETURNS VOID AS 
$$
DECLARE
	EFFT_VRSN_ID_VAL	NUMERIC;
	CAND_VRSN_ID_VAL	NUMERIC;
BEGIN
	EFFT_VRSN_ID_VAL := GET_CUR_VRSN_ID(HSR_ID_IN);
	CAND_VRSN_ID_VAL := GET_CUR_VRSN_ID(CAND_HSR_ID_IN);
	INSERT INTO HSR_MRG_CAND_TBL (HSR_ID, CAND_HSR_ID, EFFT_VRSN_ID, CAND_VRSN_ID) VALUES 
		(HSR_ID_IN, CAND_HSR_ID_IN, EFFT_VRSN_ID_VAL, CAND_VRSN_ID_VAL);
	RETURN;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- MARK A MERGE A COMPLETE
CREATE OR REPLACE FUNCTION MRG_CAND
(
	FROM_ID_IN	IN NUMERIC,
	TO_ID_IN	IN NUMERIC -- THE ID OF THE HSR THAT RESOLVES THIS
) RETURNS VOID AS 
$$
DECLARE
	TO_VRSN_ID_VAL		NUMERIC;
	FROM_VRSN_ID_VAL 	NUMERIC;
BEGIN
	TO_VRSN_ID_VAL := GET_CUR_VRSN_ID(TO_ID_IN);
	FROM_VRSN_ID_VAL := GET_CUR_VRSN_ID(FROM_ID_IN);
	--UPDATE HSR_MRG_CAND_TBL SET RSLV_VRSN_ID = FROM_VRSN_ID_VAL, RSLV_OUTC_CS = 'MRG', OBSLT_UTC = CURRENT_TIMESTAMP WHERE 
	--	HSR_ID = FROM_ID_IN;
	UPDATE HSR_MRG_CAND_TBL SET RSLV_VRSN_ID = TO_VRSN_ID_VAL, RSLV_OUTC_CS = 'MRG', OBSLT_UTC = CURRENT_TIMESTAMP WHERE
		HSR_ID = FROM_ID_IN AND CAND_HSR_ID = TO_ID_IN OR HSR_ID = TO_ID_IN AND CAND_HSR_ID = FROM_ID_IN;
	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- IGNORE A MERGE
CREATE OR REPLACE FUNCTION MRG_IGNR
(
	HSR_ID_IN	IN NUMERIC
) RETURNS VOID AS 
$$
BEGIN
	UPDATE HSR_MRG_CAND_TBL SET RSLV_OUTC_CS = 'IGN', OBSLT_UTC = CURRENT_TIMESTAMP WHERE 
		HSR_ID = HSR_ID_IN AND OBSLT_UTC IS NULL;
	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET OUTSTANDING MERGES
CREATE OR REPLACE FUNCTION GET_OUTSD_MRG
(
) RETURNS TABLE(HSR_ID NUMERIC, EFFT_VRSN_ID NUMERIC) AS 
$$
BEGIN
	RETURN QUERY SELECT DISTINCT A.HSR_ID, A.EFFT_VRSN_ID FROM HSR_MRG_CAND_TBL A WHERE OBSLT_UTC IS NULL;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET MERGE CANDIDATES
CREATE OR REPLACE FUNCTION GET_MRG_CAND
(
	HSR_ID_IN	IN NUMERIC
) RETURNS TABLE(CAND_HSR_ID NUMERIC, CAND_VRSN_ID NUMERIC) AS 
$$
BEGIN
	RETURN QUERY SELECT DISTINCT A.CAND_HSR_ID, A.CAND_VRSN_ID FROM HSR_MRG_CAND_TBL A WHERE HSR_ID = HSR_ID_IN AND OBSLT_UTC IS NULL;
END
$$ LANGUAGE plpgsql;