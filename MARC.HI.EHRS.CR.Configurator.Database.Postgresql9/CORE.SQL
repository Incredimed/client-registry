--
-- Copyright 2012-2013 Mohawk College of Applied Arts and Technology
-- 
-- Licensed under the Apache License, Version 2.0 (the "License"); you 
-- may not use this file except in compliance with the License. You may 
-- obtain a copy of the License at 
-- 
-- http://www.apache.org/licenses/LICENSE-2.0 
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
-- License for the specific language governing permissions and limitations under 
-- the License.
-- 
-- User: fyfej
-- Date: 5-12-2012
--

-- @DATABASE
-- CREATES THE DATABASE AND MODIFIES THE OWNER TO THE APPROPRIATE USER
-- CREATE DATABASE pgCR OWNER pgCR;

-- @LANGUAGE
-- REGISTER THE PLPGSQL LANGUAGE
--CREATE LANGUAGE PLPGSQL;

-- CORRECTS THE BYTEA ENCODING PROBLEM ON POSTGRESQL 9.X
SET bytea_output = ESCAPE;

-- INSTALL PLPGSQL
CREATE OR REPLACE FUNCTION make_plpgsql()
RETURNS VOID
LANGUAGE SQL
AS $$
CREATE LANGUAGE plpgsql;
$$;

SELECT
    CASE
    WHEN EXISTS(
        SELECT 1
        FROM pg_catalog.pg_language
        WHERE lanname='plpgsql'
    )
    THEN NULL
    ELSE make_plpgsql() END;
 
DROP FUNCTION make_plpgsql();

-- @SEQUENCE
-- TIME STAMP COMPONENT TABLE IDENTIFIER
CREATE SEQUENCE TS_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
--
-- TIMESTAMP COMPONENT TABLE
-- 
-- PURPOSE: COMPLEX TIMES MAY BE REPRESENTED WITHIN THE HEALTH CARE DOMAIN. FOR EXAMPLE, ONE SERVICE EVENT MAY HAVE
--	    AN EFFECTIVE TIME AT ONE FIXED POINT IN TIME (JUN 11 2009), HOWEVER OTHERS (SUCH AS A STAY IN HOSPITAL) MAY
--	    HAVE A RANGE SPECIFIED. IT IS FOR THIS REASON THAT WE CHOOSE TO IMPLEMENT A TIME STAMP COMPONENT TABLE
--
CREATE TABLE TS_TBL
(
	TS_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('TS_SEQ'), -- UNIQUELY IDENTIFIES THIS TIMESTAMP
	TS_VALUE	TIMESTAMPTZ NOT NULL, -- IDENTIFIES THE VALUE OF THE TIMESTAMP
	TS_PRECISION	CHAR(1) NOT NULL DEFAULT 'F', -- IDENTIFIES THE PRECISION OF THE TIMESTAMP
	TS_CLS		CHAR(1) NOT NULL DEFAULT 'S', -- CLASSIFIES THE TYPE OF TIMESTAMP COMPONENT
	TS_SET_ID	DECIMAL(20,0), -- USED TO CORRELATE DISPARATE TIME COMPONENTS TOGETHER,
	CONSTRAINT PK_TS_TBL PRIMARY KEY (TS_ID),
	CONSTRAINT CK_TS_PRECISION CHECK (TS_PRECISION IN ('Y','M','D','H','m','S','F')), -- ALLOWED VALUES FOR PRECISION:
	--	Y	- YEAR
	--	M	- MONTH
	--	D	- DAY
	--	H	- HOUR
	--	m	- MINUTES
	--	S	- SECONDS
	--	F	- FRACTION SECTIONDS (MILLISECTIONS)
	CONSTRAINT CK_TS_CLS CHECK (TS_CLS IN ('S','L','U','W')) -- ALLOWED VALUES FOR CLASSIFICATION
	--	S	- JUST A SET COMPONENT
	--	L	- LOWER BOUND
	--	U	- UPPER BOUND
	--	W	- WIDTH
);

-- @INDEX
-- USING THE VALUES
CREATE INDEX TS_TBL_TS_VALUE_IDX ON TS_TBL (TS_VALUE);

-- @INDEX
-- LOOKUP BY TIME SET SEQUENCE SHOULD BE INDEXED
CREATE INDEX TS_TBL_TS_SET_ID_IDX ON TS_TBL(TS_SET_ID);

-- @SEQUENCE
-- CONCEPT DESCRIPTOR CODE TABLE STORAGE IDENTIFIER
CREATE SEQUENCE CD_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
--
-- THE CONCEPT DESCRIPTOR TABLE
--
-- PURPOSE: COMPLEX CODE SYSTEMS (SUCH AS SNOMED CT) ARE HIERARCHICAL IN NATURE AND ARE MADE UP OF MANY COMPONENTS,
--	    THIS MAKES IT DIFFICULT TO STORE THEM INLINE WITHIN A TABLE. THAT IS THE SOLE PURPOSE OF THIS TABLE, TO
--	    REGISTER CODES THAT ARE USED WITHIN THE SHARED HEALTH RECORD DATA.
--
CREATE TABLE CD_TBL
(
	CD_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('CD_SEQ'), -- UNIQUE IDENTIFIER OF THE CODE BEING USED
	CD_VAL		VARCHAR(20) NOT NULL, -- THE VALUE OF THE CODE
	CD_DOMAIN 	VARCHAR(48),  -- THE DOMAIN FROM WHICH THE CODE WAS SELECTED
	ORG_CNT_TYP	VARCHAR(48), -- THE CONTENT/TYPE OF THE ORIGINAL TEXT
	ORG_TEXT   	BYTEA, -- THE ORIGINAL TEXT OR MULTIMEDIA BEHIND THE REASON FOR SELECTING THE CODE
	CD_VRSN		VARCHAR(20), -- IDENTIFIES THE VERSION OF THE CODE DOMAIN FROM WHICH THE CODE WAS SELECTED
	CD_QLFYS	DECIMAL(20,0), -- IDENTIFIES THE CODE THAT THIS CODE TUPLE QUALIFIES
	CD_QLFYS_AS	CHAR(1), -- IDENTIFIES HOW THE CODE QUALIFIES
	CD_QLFYS_KV_ID	VARCHAR(48), -- IDENTIFIES THE KEY/VALUE CORRELATION ID
	CONSTRAINT PK_CD_TBL PRIMARY KEY (CD_ID),
	CONSTRAINT FK_CD_QLFYS_CD_TBL FOREIGN KEY (CD_QLFYS) REFERENCES CD_TBL(CD_ID)
);

-- @INDEX
-- MAY NEED TO LOOKUP CODES BASED ON THE CODE THAT THEY QUALIFY
CREATE INDEX CD_TBL_CD_QLFYS_IDX ON CD_TBL(CD_QLFYS);

-- @INDEX
-- LOOKUP BY CODE SYSTEM AND CODE
CREATE INDEX CD_TBL_CD_CD_DOMAIN_IDX ON CD_TBL(CD_DOMAIN, CD_VAL);


-- @SEQUENCE
-- HEALTH SERVICE RECORD TABLE IDENTIFIER SEQUENCE
CREATE SEQUENCE HSR_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- THE HEALTH SERVICE RECORD TABLE
--
-- PURPOSE: STORES INFORMATION RELATED TO HEALTH SERVICES EVENTS
-- 
CREATE TABLE HSR_TBL
(
	HSR_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('HSR_SEQ'), -- UNIQUELY IDENTIFIES THIS HEALTH SERVICE RECORD
	HSR_CLS DECIMAL(4) NOT NULL, -- CLASSIFIES THE TYPE OF HEALTH SERVICE RECORD
	CONSTRAINT PK_HSR_TBL PRIMARY KEY (HSR_ID)
);

-- @INDEX
-- THE HEALTH SERVICE RECORDS BY CLASSIFICATION CODE INDEX
CREATE INDEX HSR_CLS_IDX ON HSR_TBL(HSR_CLS);

-- @TABLE 
-- THE HEALTH SERVICE RECORD VERSION TABLE
--
-- PURPOSE: THIS TABLE ALLOWS MULTIPLE VERSIONS OF ONE HEALTH SERVICE RECORD TO BE KEPT, ALLOWING
-- 	    CLINICAL CHANGES IN DATA TO BE TRACKED.
--
CREATE TABLE HSR_VRSN_TBL 
(
	HSR_VRSN_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('HSR_SEQ'), -- UNIQUELY IDENTIFIES THE CURRENT VERSION OF HEALTH SERVICE RECORD
	EVT_TYP_CD_ID	DECIMAL(20,0), -- IDENTIFIES THE CLINICAL EVENT THAT OCCURRED
	CRTN_UTC	TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- IDENTIFIES THE TIME WHEN THE VERSION WAS CREATED
	AUT_UTC		TIMESTAMPTZ NOT NULL, -- IDENTIFIES THE TIME WHEN THE VERSION DATA WAS AUTHORED
	OBSLT_UTC	TIMESTAMPTZ,  -- IDENTIFIES THE TIME WHEN THE VERSION WAS OBSOLETED
	REFUTED_IND	BOOLEAN NOT NULL DEFAULT FALSE, -- IF TRUE, THEN THE SERVICE EVENT HAS BEEN REFUTED TO HAVE HAPPENED
	EFFT_TS_SET_ID	DECIMAL(20,0), -- IDENTIFIES THE EFFECTIVE TS TIME SET THAT REPRESENTS THE TIME (OR PERIOD) THIS 
	STATUS_CS	VARCHAR(10) NOT NULL DEFAULT 'new', -- IDENTIFIES THE STATUS OF THE HEALTH SERVICES RECORD
	LANG_CS		VARCHAR(10) NOT NULL DEFAULT 'en', -- IDENTIFIES THE LANGUAGE IN WHICH THE HEALTH SERVICE EVENT WAS PROVIDED
	HSR_ID		DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE HEALTH SERVICE EVENT ID THAT THIS VERSION APPLIES TO
	RPLC_VRSN_ID	DECIMAL(20,0), -- IDENTIFIES THE VERSION THAT THIS HEALTH SERVICE EVENT REPLACES (OR OBSOLETES)
	CONSTRAINT PK_HSR_VRSN_TBL PRIMARY KEY (HSR_VRSN_ID),
	CONSTRAINT FK_EVT_TYP_CD_CD_TBL FOREIGN KEY (EVT_TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	--CONSTRAINT FK_EFFT_TS_SET_ID_TS_TBL FOREIGN KEY (EFFT_TS_SET_ID) REFERENCES TS_TBL(TS_SET_ID), CANT DO THIS AS A SET ID CANNOT BE UNIQUE
	CONSTRAINT FK_HSR_ID_HSR_TBL FOREIGN KEY (HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_RPLC_VRSN_ID_HSR_TBL FOREIGN KEY (RPLC_VRSN_ID) REFERENCES HSR_VRSN_TBL(HSR_VRSN_ID)
);

-- @SEQUENCE 
-- SERVICE DELIVERY LOCATION TABLE UNIQUE IDENTIFIER
CREATE SEQUENCE SDL_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- SERVICE DELIVERY LOCATION INFORMATION TABLE
--
-- PURPOSE: HOLDS A LOCAL "CACHE" COPY OF THE SERVICE DELIVERY LOCATIONS USED BY RECORD WITHIN THE SHARED HEALTH RECORD
--
CREATE TABLE SDL_TBL
(
	SDL_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('SDL_SEQ'), -- INTERNALLY GENERATED, LOCAL IDENTIFIER FOR THE SDL
	SDL_NAME	VARCHAR(255),  -- THE NAME OF THE SDL
	SDL_ADDR_SET_ID	DECIMAL(20,0), -- THE AD SET ID THAT REPRESENTS THE ADDRESS OF THIS SDL
	SDL_TYP_CD_ID	DECIMAL(20,0), -- THE CD ID THAT REPRESENTS THE TYPE OF THIS SDL
	CONSTRAINT PK_SDL_TBL PRIMARY KEY (SDL_ID),
	--CONSTRAINT FK_SDL_ADDR_SET_ID_ADDR_TBL FOREIGN KEY (SDL_ADDR_SET_ID) REFERENCES ADDR_CMP_TBL(ADDR_SET_ID), CANT DO THIS AS AN ADDR SET ID ISNT UNIQUE
	CONSTRAINT FK_SDL_TYP_CD_ID_CD_TBL FOREIGN KEY (SDL_TYP_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- @SEQUENCE 
-- NATIONHOOD ID
CREATE SEQUENCE NTN_SEQ START WITH 1 INCREMENT BY 1;

-- @SEQUENCE
-- THE SEQUENCE FOR THE PERSON OBJECT
CREATE SEQUENCE PSN_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- PERSON TABLE
--
-- PURPOSE: A PERSON IS AN ENTITY WHICH IS LIVING AND BREATHING. IN THIS CLIENT REGISTRY 
--	    MODEL THE PERSON TABLE STORES THE MASTER PERSON IDENTIFIER AND ALL DATA IS 
--	    STORED AS VERSION IN THE PERSON VERSION TABLE
--
CREATE TABLE PSN_TBL
(
	PSN_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_SEQ'), -- THE IDENTIFIER FOR THE PERSON RECORD
	CONSTRAINT PK_PSN_TBL PRIMARY KEY (PSN_ID)
);



-- @TABLE
-- PERSON VERSION TABLE
-- 
-- PURPOSE: THE CLIENT REGISTRY DATA MODEL IS VERSIONED AND EACH PERSON RECORD MAY CONTAIN
--	    MANY VERSIONS
CREATE TABLE PSN_VRSN_TBL
(
	PSN_VRSN_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_SEQ'), -- THE IDENTIFIER FOR THE VERSION 
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER OF THE PERSON TO WHICH THIS VERISON APPLIES
	RPLC_VRSN_ID	DECIMAL(20,0), -- THE IDENTIFIER OF THE VERSION THAT THIS VERSION REPLACES
	REG_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER OF THE REGISTRATION EVENT (HSR_VRSN_TBL) THAT CAUSED THIS VERSION OF THE PATIENT TO COME INTO BEING
	STATUS		VARCHAR(12) NOT NULL DEFAULT 'Active', -- THE STATUS OF THE VERSION
	CRT_UTC		TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THAT THE VERSION WAS CREATED
	OBSLT_UTC	TIMESTAMPTZ, -- THE TIMESTAMP AT WHICH TIME THE RECORD DID OR WILL BECOME OBSOLETE
	GNDR_CS		CHAR(1), -- THE GENDER CODE OF THE PERSON AS OF THE CURRENT VERSION
	BRTH_TS		DECIMAL(20,0), -- IDENTIFIES WHEN THE PERSON WAS BORN OR PURPORTED TO BE BORN
	DCSD_TS		DECIMAL(20,0), -- IDENTIFIES WHEN THE PERSON BECAME DECEASED
	MB_ORD		DECIMAL(2), -- IDENTIFIES THE ORDER OF A MULTIPLE BIRTH
	RLGN_CD_ID	DECIMAL(20,0), -- IDENTIFIES THE RELIGION CODE
	VIP_CD_ID	DECIMAL(20,0), -- VERY IMPORTANT PERSON CODE (PIX)
	MRTL_STS_CD_ID	DECIMAL(20,0), -- MARITAL STATUS CODE
	BRTH_SDL_ID	DECIMAL(20,0), -- BIRTH PLACE
	CONSTRAINT PK_PSN_VRSN_TBL PRIMARY KEY (PSN_VRSN_ID),
	CONSTRAINT FK_PSN_PSN_VRSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_RPLC_VRSN_TBL FOREIGN KEY (RPLC_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_RLGN_CD_CD_TBL FOREIGN KEY (RLGN_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_BRTH_TS_TS_TBL FOREIGN KEY (BRTH_TS) REFERENCES TS_TBL(TS_ID),
	CONSTRAINT FK_DCSD_TS_TS_TBL FOREIGN KEY (DCSD_TS) REFERENCES TS_TBL(TS_ID),
	CONSTRAINT FK_REG_VRSN_ID_HSR_VRSN_TBL FOREIGN KEY (REG_VRSN_ID) REFERENCES HSR_VRSN_TBL(HSR_VRSN_ID),
	CONSTRAINT FK_PSN_VIP_CD_ID_CD_TBL FOREIGN KEY (VIP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PSN_MRTL_STS_CD_TBL FOREIGN KEY (MRTL_STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PSN_BRTH_SDL_SDL_TBL FOREIGN KEY (BRTH_SDL_ID) REFERENCES SDL_TBL(SDL_ID)
);

-- @INDEX
-- SUPPORT LOOKUP BY REGISTRATION VERSION ID
CREATE INDEX PSN_VRSN_REG_EVT_IDX ON PSN_VRSN_TBL(REG_VRSN_ID);

-- @INDEX
-- SUPPORT LOOKUP BY PERSON ID
CREATE INDEX PSN_VRSN_PSN_ID_IDX ON PSN_VRSN_TBL(PSN_ID);

-- @INDEX
-- LOOKUP BY GENDER
CREATE INDEX PSN_VRSN_GNDR_CS_IDX ON PSN_VRSN_TBL(GNDR_CS);

-- @TABLE
-- THE PERSON RECORD LINKAGE TABLE
--
-- PURPOSE: THIS TABLE ALLOWS A VERSION OF A PERSON RECORD TO BE LINKED TO ANOTHER HEALTH
--	    SERVICE EVENT
--
CREATE TABLE PSN_LNK_TBL
(
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER BEING LINKED
	CMP_PSN_ID	DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER THAT IS BEING LINKED TO
	LNK_CLS		DECIMAL(8,0) NOT NULL, -- THE CLASSIFICATION OF THE LINK
	SYMBOLIC	BOOLEAN NOT NULL DEFAULT TRUE, -- TRUE IF PARENT PROPERTIES (AUTHOR, ETC) SHOULD BE CONDUCTED TO CHILD
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE VERSION WHERE THIS RELATIONSHIP BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- IDENTIFIES THE VERSION WHERE THIS RELATIONSHIP IS NO LONGER EFFECTIVE
	CONSTRAINT PK_PSN_LNK_TBL PRIMARY KEY (PSN_ID, CMP_PSN_ID),
	CONSTRAINT FK_PSN_ID_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_CMP_PSN_ID_PSN_TBL FOREIGN KEY (CMP_PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_CTZNSHP_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_CTZNSHP_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- NEED THE LOOKUP ON HSR_LNK_TBL TO BE QUICK BASED ON THE VERSION ID
CREATE INDEX PSN_LNK_TBL_PSN_ID_IDX ON PSN_LNK_TBL(PSN_ID);

-- @INDEX
-- VERSION INDEX
CREATE INDEX PSN_LNK_VRSN_IDX ON PSN_LNK_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);

-- @TABLE
-- PERSON CITIZENSHIP TABLE
CREATE TABLE PSN_CTZNSHP_TBL
(
	CTZN_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('NTN_SEQ'), -- UNIQUE IDENTIFIER FOR THE NATIONHOOD TABLE
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER OF THE PERSON
	NTN_CS		CHAR(3) NOT NULL, -- ISO3166-1 CODE FOR THE NATION
	NTN_NAME	VARCHAR(200) NOT NULL, -- NATION NAME
	EFFT_TS_SET_ID	DECIMAL(20,0), -- THE TIME THE CITIZENSHIP BECAME EFFECTIVE
	STATUS_CS	VARCHAR(10) NOT NULL DEFAULT 'Active', -- STATUS OF THE CITIZENSHIP
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE VERSION WHERE THIS RELATIONSHIP BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- IDENTIFIES THE VERSION WHERE THIS RELATIONSHIP IS NO LONGER EFFECTIVE
	CONSTRAINT PK_PSN_CTZNSHP_TBL PRIMARY KEY (CTZN_ID),
	CONSTRAINT FK_PSN_CTZNSHP_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_CTZNSHP_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_CTZNSHP_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- LOOKUP CITIZENSHIP BY PERSON ID
CREATE INDEX PSN_CTZNSHP_PSN_IDX ON PSN_CTZNSHP_TBL(PSN_ID);

-- @INDEX
-- VERSION INDEX
CREATE INDEX PSN_CTZNSHP_VRSN_IDX ON PSN_CTZNSHP_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);

-- @SEQUENCE 
-- EMPLOYMENT SEQUENCE
CREATE SEQUENCE PSN_EMPL_SEQ START WITH 1 INCREMENT BY 1;

-- @INDEX 
-- EMPLOYMENT TABLE
CREATE TABLE PSN_EMPL_TBL
(
	EMPL_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_EMPL_SEQ'), -- UNIQUE IDENTIFIER FOR THE EMPLOYMENT
	PSN_ID		DECIMAL(20,0) NOT NULL, -- IDENTIFIER FOR THE PERSON
	EMPL_CD_ID	DECIMAL(20,0) NOT NULL, -- EMPLOYMENT OCCUPATION CODE
	EFFT_TS_SET_ID	DECIMAL(20,0) NOT NULL, -- TIMESTAMP THAT THE EMPLOYMENT RECORD BECAME EFFECTIVE
	STATUS_CS	VARCHAR(10) NOT NULL DEFAULT 'Active', -- STATUS CODE OF THE EMPLOYMENT RECORD
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE VERSION WHERE THIS EMPLOYMENT BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- IDENTIFIES THE VERSION WHERE THIS EMPLOYMENT IS NO LONGER EFFECTIVE
	CONSTRAINT PK_PSN_EMPL_TBL PRIMARY KEY (EMPL_ID),
	CONSTRAINT FK_PSN_EMPL_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_EMPL_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_EMPL_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_EMP_CD_TBL FOREIGN KEY (EMPL_CD_ID) REFERENCES CD_TBL(CD_ID)
);

-- @INDEX
-- LOOKUP EMPLOYMENT BY PERSON ID
CREATE INDEX PSN_EMPL_PSN_IDX ON PSN_EMPL_TBL(PSN_ID);

-- @INDEX
-- VERSION INDEX
CREATE INDEX PSN_EMPL_VRSN_IDX ON PSN_EMPL_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);	

-- @SEQUENCE
-- RELATIONSHIP SEQUENCE
CREATE SEQUENCE PSN_RLTNSHP_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- PERSONAL RELATIONSHIP TABLE
-- 
-- PURPOSE: STORES THE RELATIONSHIPS THAT ONE PERSON HAS WITH ANOTHER
--
CREATE TABLE PSN_RLTNSHP_TBL
(
	RLTNSHP_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_RLTNSHP_SEQ'), -- UNIQUE IDENTIFIER FOR THE RELATIONSHIP
	SRC_PSN_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE SOURCE VERSION IDENTIFIER
	TRG_PSN_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE TARGET OF THE RELATIONSHIP
	KIND_CS		VARCHAR(10) NOT NULL, -- IDENTIFIES THE TYPE OF RELATIONSHIP
	STATUS_CS	VARCHAR(10) NOT NULL DEFAULT 'Active', -- STATUS CODE OF THE RELATIONSHIP
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_PSN_RLTNSHP_TBL PRIMARY KEY (RLTNSHP_ID),
	CONSTRAINT FK_PSN_RLTNSHP_SRC_PSN_TBL FOREIGN KEY (SRC_PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_RLTNSHP_TRG_PSN_TBL FOREIGN KEY (TRG_PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_RLTNSHP_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_RLTNSHP_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- LOOKUP RELATIONSHIP BY SOURCE PERSON
CREATE INDEX PSN_RLTNSHP_SRC_PSN_ID_IDX ON PSN_RLTNSHP_TBL(SRC_PSN_ID);

-- @INDEX
-- EFFT VERSION
CREATE INDEX PSN_RLTNSHP_EFFT_VRSN_IDX ON PSN_RLTNSHP_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);

-- @SEQUENCE
-- ADDRESS COMPONENT TABLE IDENTIFIER SEQUENCE
CREATE SEQUENCE ADDR_CMP_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- ADDRESS SET TABLE
--
-- PURPOSE: THE ADDRESS SETS WILL HAVE COMMON DATA THAT APPLIES TO ALL COMPONENTS IN THE SET
--  	    THIS TABLE ENSURES THAT THIS DATA CAN BE STORED. USES THE SAME SEQUENCE AS THE COMPONENT
--
CREATE TABLE PSN_ADDR_SET_TBL
(
	ADDR_SET_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('ADDR_CMP_SEQ'), -- THE IDENTIFIER FOR THE SEQUENCE
	ADDR_SET_USE	DECIMAL(6) NOT NULL, -- THE PRIMARY USE OF THE ADDRESS
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS ADDRESS SET APPLIES
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_ADDR_SET_TBL PRIMARY KEY (ADDR_SET_ID),
	CONSTRAINT FK_ADDR_SET_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_ADDR_SET_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_ADDR_SET_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- LOOKUP ADDRESS SET BY PERSON ID
CREATE INDEX PSN_ADDR_SET_PSN_ID_IDX ON PSN_ADDR_SET_TBL(PSN_ID);

-- @INDEX
-- EFFT VERSION
CREATE INDEX PSN_ADDR_SET_EFFT_VRSN_IDX ON PSN_ADDR_SET_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);


-- @TABLE
-- UNIQUE ADDRESS COMPONENTS TABLE
--
-- PURPOSE: WHEN PERFORMING FUZZY STRING MATCHING THIS TABLE OPTIMIZES QUERIES AS STRINGS TEND TO DO FULL TABLE SCANS
CREATE TABLE ADDR_CDTBL
(
	ADDR_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('ADDR_CMP_SEQ'), -- IDENTIFIER FOR THE ADDR CODE
	ADDR_VALUE	VARCHAR(255) NOT NULL,
	CONSTRAINT PK_ADDR_ID PRIMARY KEY (ADDR_ID)
);

-- @INDEX
-- LOOKUP BY NAME VALUE
CREATE INDEX ADDR_NAME_VALUE_IDX ON ADDR_CDTBL(ADDR_VALUE);

-- @TABLE
-- THE ADDRESS COMPONENT TABLE
--
-- PURPOSE: THE ADDRESS COMPONENT TABLE ALLOWS ADDRESSES TO BE STORED IN A COMPONENTIZED WAY. EACH ADDRESS CAN 
--	    BE MADE UP OF DIFFERENT COMPONENTS AND CAN BE LINKED TOGETHER IN AN ADDRESS SET
--
CREATE TABLE ADDR_CMP_TBL
(
	ADDR_CMP_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('ADDR_CMP_SEQ'), -- THE ADDRESS COMPONENT ID
	ADDR_CMP_CLS	DECIMAL(4) NOT NULL DEFAULT 1, -- THE ADDRESS COMPONENT CLASSIFICATION TYPE
	ADDR_CMP_VALUE	DECIMAL(20,0) NOT NULL, -- THE VALUE OF THE ADDRESS COMPONENT
	ADDR_SET_ID	DECIMAL(20,0), -- USED TO CORRELATE ONE OR MORE ADDRESS COMPONENTS INTO A SET
	CONSTRAINT PK_ADDR_CMP_TBL PRIMARY KEY (ADDR_CMP_ID),
	CONSTRAINT FK_ADDR_VALUE FOREIGN KEY (ADDR_CMP_VALUE) REFERENCES ADDR_CDTBL(ADDR_ID)
);

-- @INDEX
-- LOOKUP BY ADDRESS SET
CREATE INDEX ADDR_CMP_TBL_ADDR_SET_ID_IDX ON ADDR_CMP_TBL(ADDR_SET_ID);

-- @INDEX
-- LOOKUP ADDRESS COMPONENT BY VALUE
CREATE INDEX ADDR_CMP_VALUE_ID ON ADDR_CMP_TBL(ADDR_CMP_VALUE);

-- @VIEW
-- ADDR COMPONENT VIEW
CREATE OR REPLACE VIEW ADDR_CMP_VW AS
	SELECT ADDR_CMP_ID, ADDR_CMP_CLS, ADDR_CDTBL.ADDR_VALUE AS ADDR_CMP_VALUE, ADDR_SET_ID
		FROM ADDR_CMP_TBL INNER JOIN ADDR_CDTBL ON (ADDR_CMP_TBL.ADDR_CMP_VALUE = ADDR_CDTBL.ADDR_ID);


-- @VIEW
-- PERSON ADDRESS SET VIEW
CREATE OR REPLACE VIEW PSN_ADDR_SET_VW AS
	SELECT A.PSN_ID, A.ADDR_SET_ID, A.ADDR_SET_USE, A.EFFT_VRSN_ID, A.OBSLT_VRSN_ID, B.ADDR_CMP_ID, B.ADDR_CMP_CLS, B.ADDR_CMP_VALUE
	FROM PSN_ADDR_SET_TBL A NATURAL JOIN ADDR_CMP_TBL B;

-- @SEQUENCE
-- THE NAME COMPONENT TABLE IDENTIFIER
CREATE SEQUENCE NAME_CMP_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- NAME SET TABLE
--
-- PURPOSE: THE NAME SETS WILL HAVE COMMON DATA THAT APPLIES TO ALL COMPONENTS IN THE SET
--  	    THIS TABLE ENSURES THAT THIS DATA CAN BE STORED. USES THE SAME SEQUENCE AS THE COMPONENT
--
CREATE TABLE PSN_NAME_SET_TBL
(
	NAME_SET_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('NAME_CMP_SEQ'), -- THE IDENTIFIER FOR THE SEQUENCE
	NAME_SET_USE	DECIMAL(5) NOT NULL, -- THE PRIMARY USE OF THE NAME
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS ADDRESS SET APPLIES
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_NAME_SET_TBL PRIMARY KEY (NAME_SET_ID),
	CONSTRAINT FK_NAME_SET_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_NAME_SET_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_NAME_SET_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- LOOKUP NAME SET BY PERSON ID
CREATE INDEX PSN_NAME_SET_PSN_ID_IDX ON PSN_NAME_SET_TBL(PSN_ID);

-- @INDEX
-- EFFT VERSION
CREATE INDEX PSN_NAME_SET_EFFT_VRSN_IDX ON PSN_NAME_SET_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);

-- @TABLE
-- UNIQUE NAMES TABLE
--
-- PURPOSE: WHEN PERFORMING FUZZY STRING MATCHING THIS TABLE OPTIMIZES QUERIES AS THE FUZZY STRING
--	    MATCHING ALGORITHM MUST DO A FULL TABLE SCAN
CREATE TABLE NAME_CDTBL
(
	NAME_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('NAME_CMP_SEQ'), -- IDENTIFIER FOR THE NAME CODE
	NAME_VALUE	VARCHAR(255) NOT NULL,
	NAME_SOUNDEX	CHAR(4) NOT NULL,
	CONSTRAINT PK_NAME_ID PRIMARY KEY (NAME_ID)
);

-- @INDEX
-- LOOKUP BY NAME VALUE
CREATE INDEX NAME_NAME_VALUE_IDX ON NAME_CDTBL(NAME_VALUE);

-- @INDEX
-- LOOKUP BY SOUNDEX
CREATE INDEX NAME_VALUE_SOUNDEX_IDX ON NAME_CDTBL(NAME_SOUNDEX);

-- @TABLE
-- THE NAME COMPONENT TABLE
--
-- PURPOSE: THE NAME COMPONENT TABLE ALLOWS FOR THE STORAGE OF COMPLEX NAME COMPONENTS
--
CREATE TABLE NAME_CMP_TBL
(
	NAME_CMP_ID	DECIMAL(20, 0) NOT NULL DEFAULT nextval('NAME_CMP_SEQ'), -- THE NAME COMPONENT ID
	NAME_CMP_CLS	DECIMAL(4) NOT NULL DEFAULT 1, -- THE NAME COMPONENT TYPE
	NAME_CMP_VALUE  DECIMAL(20, 0) NOT NULL, -- THE VALUE OF THE NAME COMPONENT
	NAME_SET_ID	DECIMAL(20,0), -- USED TO CORRELATE ONE OR MORE NAME COMPONENTS TOGETHER
	CONSTRAINT PK_NAME_CMP_TBL PRIMARY KEY (NAME_CMP_ID),
	CONSTRAINT FK_NAME_NAME_CDTBL FOREIGN KEY (NAME_CMP_VALUE) REFERENCES NAME_CDTBL(NAME_ID)
);

-- @INDEX
-- LOOKUP BY NAME SET ID SHOULD BE INDEXED
CREATE INDEX NAME_CMP_TBL_NAME_SET_ID_IDX ON NAME_CMP_TBL(NAME_SET_ID);

-- @INDEX
-- LOOKUP NAME COMPONENT BY VALUE
CREATE INDEX NAME_CMP_VALUE_ID ON NAME_CMP_TBL(NAME_CMP_VALUE);

-- @VIEW
-- NAME COMPONENT VIEW
CREATE OR REPLACE VIEW NAME_CMP_VW AS
	SELECT NAME_CMP_ID, NAME_CMP_CLS, NAME_CDTBL.NAME_VALUE AS NAME_CMP_VALUE, NAME_SET_ID, NAME_CDTBL.NAME_SOUNDEX
		FROM NAME_CMP_TBL INNER JOIN NAME_CDTBL ON (NAME_CMP_TBL.NAME_CMP_VALUE = NAME_CDTBL.NAME_ID);
-- @VIEW
-- PERSON NAME SET VIEW
CREATE OR REPLACE VIEW PSN_NAME_SET_VW AS
	SELECT A.PSN_ID, A.NAME_SET_ID, A.NAME_SET_USE, A.EFFT_VRSN_ID, A.OBSLT_VRSN_ID, B.NAME_CMP_ID, B.NAME_CMP_CLS, B.NAME_CMP_VALUE
	FROM PSN_NAME_SET_TBL A NATURAL JOIN NAME_CMP_TBL B;

-- @SEQUENCE 
-- TELECOMMUNICATIONS ADDRESS SEQUENCE
CREATE SEQUENCE PSN_TEL_SEQ START WITH 1 INCREMENT BY 1;


-- @TABLE
-- TELECOMMUNICATIONS ADDRESS TABLE
-- 
-- PURPOSE: CONTAINS A LIST OF ALL TELECOMMUNICATIONS ADDRESSES THAT HAVE BEEN ENTERED BY THE USER
--
CREATE TABLE PSN_TEL_TBL
(
	TEL_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_TEL_SEQ'), -- UNIQUE IDENTIFIER FOR THE TELECOMMUNICATIONS ADDRESS
	TEL_VALUE	VARCHAR(255) NOT NULL, -- VALUE OF THE TELECOMMUNICATIONS ADDRESS
	TEL_USE		VARCHAR(32), -- THE VALID USES OF THE TELECOMMUNICATIONS ADDRESS
	TEL_CAP		VARCHAR(32), -- THE CAPABILITIES OF THE TELECOMMUNICATIONS DEVICE
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS TELECOMMUNICATIONS ADDRESS APPLIE
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_TEL_TBL PRIMARY KEY (TEL_ID),
	CONSTRAINT FK_TEL_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_TEL_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_TEL_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @INDEX
-- LOOKUP TELECOMMUNICATIONS ADDRESS BY VALUE
CREATE INDEX PSN_TEL_VALUE_IDX ON PSN_TEL_TBL(TEL_VALUE);

-- @INDEX
-- LOOKUP TELECOMMUNICATIONS ADDRESS BY PERSON
CREATE INDEX PSN_TEL_PSN_ID_IDX ON PSN_TEL_TBL(PSN_ID);

-- @INDEX
-- EFFT VERSION
CREATE INDEX PSN_TEL_EFFT_VRSN_IDX ON PSN_TEL_TBL(EFFT_VRSN_ID, OBSLT_VRSN_ID);

-- @SEQUENCE
-- UNIQUE IDENTIFIERS FOR THE MASKING INDICATORS
CREATE SEQUENCE PSN_MSK_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- PERSON MASKING TABLE
CREATE TABLE PSN_MSK_TBL
(
	MSK_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_MSK_SEQ'), -- UNIQUE IDENTIFIER FOR THE MASKING CODE
	MSK_CS		VARCHAR(2) NOT NULL DEFAULT 'N', -- HL7V3 X_VERYBASICCONFIDENTIALITYKIND
	PSN_ID		DECIMAL(20,0) NOT NULL,  -- THE PERSON TO WHICH THE MASK APPLIES
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL,  -- THE EFFECTIVE VERSION OF THE MASK
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION THAT THE MASK IS OR WILL BECOME OBSOLETE
	CONSTRAINT PK_MSK_TBL PRIMARY KEY (MSK_ID), 
	CONSTRAINT FK_MSK_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_MSG_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_MSK_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @TABLE
-- ALTERNATE IDENTIFIERS FOR THE PERSON
--
-- PURPOSE: STORES ALTERNATE KNOWN IDENTIFIERS FOR THE SPECIFIED PATIENT
--
CREATE TABLE PSN_ALT_ID_TBL
(
	ID_DOMAIN	VARCHAR(256) NOT NULL, -- DOMAIN OF THE ALTERNATE IDENTIFIER
	ID_VALUE	VARCHAR(256) NOT NULL, -- VALUE OF THE ALTERNATE IDENTIFIER
	ID_AUTH		VARCHAR(256), -- THE AUTHORITY RESPONSIBLE FOR ASSIGNING THE ID
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS IDENTIFIER APPLIES
	IS_HCN		BOOLEAN NOT NULL DEFAULT TRUE, -- TRUE IF THE IDENTIFIER IS A HEALTHCARE IDENTIFIER
	IS_PRVT		BOOLEAN NOT NULL DEFAULT FALSE, -- TRUE IF THE IDENTIFIER IS PRIVATE (I.E. NOT TO BE DISPLAYED OR RETURNED IN MESSAGES)
	ID_PURP_CD_ID	DECIMAL(20,0), -- IDENTIFIER PURPOSE
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_PSN_ALT_ID_TBL PRIMARY KEY (ID_DOMAIN, ID_VALUE, PSN_ID),
	CONSTRAINT FK_PSN_ALT_ID_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_ALT_ID_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_ALT_ID_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_ALT_ID_PURP_CD_TBL FOREIGN KEY (ID_PURP_CD_ID) REFERENCES CD_TBL(CD_ID)
);

-- @INDEX
-- LOOKUP ALTERNATE IDENTIFIER BY PERSON ID
CREATE INDEX PSN_ALT_ID_PSN_ID_IDX ON PSN_ALT_ID_TBL(PSN_ID);

-- @INDEX
-- LOOKUP BY ALTERNATE IDENTIFIER
CREATE INDEX PSN_ALT_ID_EXT_IDX ON PSN_ALT_ID_TBL(ID_DOMAIN, ID_VALUE);

-- @SEQUENCE
-- SEQUENCE FOR THE LANGUAGE TABLE
CREATE SEQUENCE PSN_LANG_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE 
-- COMMUNICATION LANGUAGES BY THE PERSON
-- 
-- PURPOSE: STORES THE WRITTEN AND VERBAL LANGUAGES THAT CAN BE USED TO COMMUNICATE WITH THE PERSON
--
CREATE TABLE PSN_LANG_TBL
(
	LANG_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('PSN_LANG_SEQ'), -- UNIQUE IDENTIFIER FOR THE LANGUAGE COMMUNCIATIONS
	LANG_CS		VARCHAR(3) NOT NULL, -- THE ISO-639-2 CODE FOR THE LANGUAGE OF COMMUNICATION
	MODE_CS		DECIMAL(1) NOT NULL DEFAULT 3, -- THE MODE OF UNDERSTANDING (1 = WRITTEN, 2 = VERBAL, 4 = FLUENT)
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS LANGUAGE APPLIES
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_PSN_LANG_TBL PRIMARY KEY (LANG_ID),
	CONSTRAINT FK_PSN_LANG_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_LANG_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_LANG_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT CK_PSN_LANG_MODE_CS CHECK (MODE_CS > 0 AND MODE_CS < 8)
);

-- @INDEX
-- LOOKUP PERSON LANGUAGE BY PERSON
CREATE INDEX PSN_LANG_PSN_ID_IDX ON PSN_LANG_TBL(PSN_ID);

-- @TABLE 
-- PERSON RACE TABLE
-- 
-- PURPOSE: STORES THE REGISTERED RACE OF THE PERSON(S)
--
-- NOTE: A RACE IS TIED TO THE PERSON RATHER THAN THE VERSION OF THE PERSON RECORD THIS MEANS
--       THAT ONCE A PERSON HAS BEEN ASSIGNED A RACE AND THE RACE HAS BEEN OBSOLETED, THEY CAN NO 
-- 	 LONGER BE ASSIGNED THE RACE AGAIN
--
CREATE TABLE PSN_RACE_TBL
(
	PSN_ID		DECIMAL(20,0) NOT NULL, -- THE VERSION OF THE CLIENT RECORD TO WHICH THIS RACE APPLIES		
	RACE_CD_ID	DECIMAL(20,0) NOT NULL, -- THE RACE CODE FOR THE PERSON RECORD
	EFFT_VRSN_ID	DECIMAL(20,0) NOT NULL, -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME EFFECTIVE
	OBSLT_VRSN_ID	DECIMAL(20,0), -- THE VERSION IDENTIFIER WHERE THIS DATA BECAME OBSOLETE
	CONSTRAINT PK_PSN_RACE_TBL PRIMARY KEY (PSN_ID, RACE_CD_ID),
	CONSTRAINT FK_PSN_RACE_PSN_TBL FOREIGN KEY (PSN_ID) REFERENCES PSN_TBL(PSN_ID),
	CONSTRAINT FK_PSN_RACE_EFFT_VRSN_TBL FOREIGN KEY (EFFT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID),
	CONSTRAINT FK_PSN_RACE_OBSLT_VRSN_TBL FOREIGN KEY (OBSLT_VRSN_ID) REFERENCES PSN_VRSN_TBL(PSN_VRSN_ID)
);

-- @SEQUENCE
-- EXTENSIONS SEQUENCE
CREATE SEQUENCE EXT_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- EXTENSION KEY TABLE
CREATE TABLE EXT_KEY_TBL
(
	EXT_KEY_ID	DECIMAL(20,0) NOT NULL DEFAULT nextval('EXT_SEQ'), -- UNIQUE IDENTIFIER FOR THE EXTENSION KEY
	EXT_NAME	VARCHAR(255) NOT NULL, -- NAME OF THE EXTENSION
	CONSTRAINT PK_EXT_KEY_TBL PRIMARY KEY (EXT_KEY_ID)
);

-- @INDEX
-- UNIQUE INDEX ON THE EXTENSION NAME
CREATE UNIQUE INDEX EXT_KEY_NAME_TBL ON EXT_KEY_TBL(EXT_NAME);

-- @TABLE
-- EXTENSIONS TABLE
-- 
-- PURPOSE: STORES EXTENSIONS THAT THE CLIENT REGISTRY COULD NOT UNDERSTAND BUT MUST REPRODUCE
-- 	    THIS IS EITHER SERIALIZED XML/BINARY REPRESENTING THE TYPE IN THE CLIENT REGISTRY SOFTWARE
--	    THAT HAS TO BE REPRODUCED
--
CREATE TABLE EXT_TBL
(
	EXT_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('EXT_SEQ'), -- UNIQUE IDENTIFIER FOR THE EXTENSION
	EXT_REP		CHAR(3) NOT NULL DEFAULT 'BIN', -- REPRESENTATION OF THE EXTENSION DATA
	EXT_TYP		VARCHAR(255) NOT NULL, -- THE .NET CLI TYPE WHICH THIS EXTENSION REPRESENTS
	EXT_DATA	BYTEA NOT NULL, -- VALUE OF THE REPRESENTATION
	EXT_PATH	VARCHAR(255) NOT NULL, -- THE PATH TO WHICH THE EXTENSION APPLIES
	EXT_KEY		DECIMAL(20,0) NOT NULL, 
	CONSTRAINT PK_EXT_TBL PRIMARY KEY(EXT_ID),
	CONSTRAINT FK_EXT_KEY FOREIGN KEY(EXT_KEY) REFERENCES EXT_KEY_TBL(EXT_KEY_ID)
);

-- @INDEX
-- LOOKUP EXTENSION BY KEY
CREATE INDEX EXT_TBL_KEY_IDX ON EXT_TBL(EXT_KEY);

-- @VIEW
-- JOIN EXTENSION KEYS WITH DATA
CREATE VIEW EXT_VW AS
	SELECT A.*, B.EXT_NAME FROM EXT_TBL A INNER JOIN EXT_KEY_TBL B ON (A.EXT_KEY = B.EXT_KEY_ID);


-- @INDEX
-- HSR VERSION BY HSR_ID
CREATE INDEX HSR_VRSN_TBL_HSR_ID_IDX ON HSR_VRSN_TBL(HSR_ID);
	
-- @TABLE
-- THE HEALTH SERVICE RECORD LINKAGE TABLE
--
-- PURPOSE: THIS TABLE ALLOWS A VERSION OF A HEALTH SERVICE RECORD TO BE LINKED TO ANOTHER HEALTH
--	    SERVICE EVENT
--
CREATE TABLE HSR_LNK_TBL
(
	HSR_ID		DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER OF THE VERSION THAT IS BEING LINKED
	CMP_HSR_ID	DECIMAL(20,0) NOT NULL, -- THE IDENTIFIER OF THE RECORD THAT IS BEING LINKED TO
	LNK_CLS		DECIMAL(8,0) NOT NULL, -- THE CLASSIFICATION OF THE LINK
	CONDUCTION	BOOLEAN NOT NULL DEFAULT TRUE, -- TRUE IF PARENT PROPERTIES (AUTHOR, ETC) SHOULD BE CONDUCTED TO CHILD
	CONSTRAINT PK_HSR_LNK_TBL PRIMARY KEY (HSR_ID, CMP_HSR_ID),
	CONSTRAINT FK_HSR_ID_HSR_TBL FOREIGN KEY (HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_CMP_HSR_ID_HSR_TBL FOREIGN KEY (CMP_HSR_ID) REFERENCES HSR_TBL(HSR_ID)
);

-- @INDEX
-- NEED THE LOOKUP ON HSR_LNK_TBL TO BE QUICK BASED ON THE VERSION ID
CREATE INDEX HSR_LNK_TBL_HSR_ID_IDX ON HSR_LNK_TBL(HSR_ID);


-- @TABLE 
-- SERVICE DELIVERY LOCATION ALTERNATIVE IDENTIFIERS
--
-- PURPOSE: THE INTERNAL 20 DIGIT NUMBER FOR THE SERVICE DELIVERY LOCATION IDENTIFIER IS AN INTERNAL IDENTIFIER ISSUED BY THE
-- 	    SHARED HEALTH RECORD. IN ORDER TO LINK THIS TO IDENTIFIERS OUTSIDE OF THE SHARED HEALTH RECORD WE NEED TO 
--	    STORE DOMAIN SPECIFIC IDENTIFIERS FOR EACH LOCATION.
--
CREATE TABLE SDL_ALT_ID_TBL
(
	SDL_ID		DECIMAL(20,0) NOT NULL, -- THE INTERNAL IDENTIFIER OF THE SDL THIS ALT ID BELONGS TO
	ALT_ID_DOMAIN	VARCHAR(255) NOT NULL, -- AN OID REPRESENTING THE DOMAIN FROM WHICH THE ALTERNATIVE IDENTIFIER BELONGS
	ALT_ID		VARCHAR(255), -- THE IDENTIFIER OF THE SDL WITHIN THE ALTERNATE DOMAIN
	CONSTRAINT PK_SDL_ALT_ID_TBL PRIMARY KEY (SDL_ID, ALT_ID_DOMAIN),
	CONSTRAINT FK_SDL_ID_SDL_TBL FOREIGN KEY (SDL_ID) REFERENCES SDL_TBL(SDL_ID)
);

-- @INDEX
-- NEED TO BE ABLE TO RESOLVE FROM A ID_DOMAIN+ID PAIR QUICKLY
CREATE UNIQUE INDEX SDL_ALT_ID_TBL_ALT_ID_IDX ON SDL_ALT_ID_TBL(ALT_ID_DOMAIN,ALT_ID);

-- @INDEX
-- NEED TO BE ABLE TO QUERY FROM SDL_ID QUICKLY
CREATE INDEX SDL_ALT_ID_TBL_SDL_ID_IDX ON SDL_TBL(SDL_ID);

-- @TABLE
-- SERVICE DELIVERY LOCATION TO HEALTH SERVICE RECORD ASSOCIATIVE TABLE
--
-- PURPOSE: ALLOWS THE LINKING OF ONE ORE MORE SERVICE DELIVERY LOCATIONS TO ONE OR MORE HEALTH SERVICE RECORDS
--
CREATE TABLE HSR_SDL_TBL
(
	HSR_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE HEALTH SERVICE RECORD TO WHICH THIS SDL ASSOC IS BOUND
	SDL_ID		DECIMAL(20,0) NOT NULL, -- IDENTIFIES THE SERVICE DELIVERY LOCATION TO WHICH THIS ASSOC IS BOUND
	SDL_CLS		DECIMAL(8) NOT NULL, -- IDENTIFIES THE CLASSIFICATION (OR HOW) OF THE ROLE LINK
	CONSTRAINT PK_HSR_SDL_TBL PRIMARY KEY (HSR_ID, SDL_ID, SDL_CLS),
	CONSTRAINT FK_HSR_ID_HSR_TBL FOREIGN KEY (HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_SDL_ID_SDL_TBL FOREIGN KEY (SDL_ID) REFERENCES SDL_TBL(SDL_ID)
);



-- @SEQUENCE
-- HEALTH CARE PARTICIPANT IDENTIFIER SEQUENCE
CREATE SEQUENCE HC_PTCPT_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- HEALTHCARE PARTICIPANT TABLE 
--
-- PURPOSE: STORES LOCAL DEMOGRAPHIC VERSION RELATED TO PROVIDERS THAT PERFORM ACTS
--
CREATE TABLE HC_PTCPT_TBL
(
	PTCPT_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('HC_PTCPT_SEQ'), -- THE IDENTIFIER FOR THE 
	PTCPT_CLS_CS		CHAR(4) NOT NULL, -- CLASSIFIES THE TYPE OF PARTICIPANT
	PTCPT_TYP_CD_ID		DECIMAL(20,0), -- LINKS TO THE CODE THAT DESCRIBES THE PARTICIPANT TYPE
	PTCPT_ADDR_SET_ID	DECIMAL(20,0), -- LINKS TO THE ADDRESS SET THAT REPRESENTS THE LEGAL ADDRESS OF THE PARTICIPANT
	PTCPT_NAME_SET_ID	DECIMAL(20,0), -- LINKS TO THE NAME SET THAT REPRESENTS THE LEGAL NAME OF THE PARTICIPANT
	CONSTRAINT PK_HC_PTCPT_TBL PRIMARY KEY (PTCPT_ID), 
	CONSTRAINT FK_PTCPT_TYPE_CD_ID FOREIGN KEY (PTCPT_TYP_CD_ID) REFERENCES CD_TBL(CD_ID)
);

-- @TABLE
-- HEALTHCARE SERVICE RECORD TO HEALTHCARE PARTICIPANT TABLE ASSOCIATION
--
-- PURPOSE: LINKS ONE OR MORE HEALTH CARE PARTICIPANTS TO A VERSION OF A HEALTHCARE SERVICE RECORD
--
CREATE TABLE HSR_HC_PTCPT_TBL
(
	HSR_ID	 DECIMAL(20,0) NOT NULL, -- THE HEALTH SERVICES EVENT THAT IS BEING LINKED TO
	PTCPT_ID	 DECIMAL(20,0) NOT NULL, -- THE PARTICIPANT ID THAT IS BEING LINKED
	PTCPT_CLS	 DECIMAL(8) NOT NULL, -- IDENTIFIES HOW THE PARTICIPANT IS INVOLVED IN THE EVENT
	PTCPT_REP_ORG_ID DECIMAL(20,0), -- LINKS TO THE PARTICIPANT ORGANIZATION THAT THIS PARTICIPANT REPRESENTS
	CONSTRAINT PK_HSR_HC_PTCPT_TBL PRIMARY KEY(HSR_ID, PTCPT_ID, PTCPT_CLS), 
	CONSTRAINT FK_HSR_ID_HSR_TBL FOREIGN KEY (HSR_ID) REFERENCES HSR_TBL(HSR_ID),
	CONSTRAINT FK_PTCPT_ID_HC_PTCPT_TBL FOREIGN KEY (PTCPT_ID) REFERENCES HC_PTCPT_TBL(PTCPT_ID),
	CONSTRAINT FK_PTCPT_REP_ORG_ID FOREIGN KEY (PTCPT_REP_ORG_ID) REFERENCES HC_PTCPT_TBL(PTCPT_ID)
);

-- @INDEX
-- LOOKUP BY HEALTH SERVICE RECORD ID NEEDS TO BE INDEXED
CREATE INDEX HSR_HC_PTCPT_TBL_HSR_ID_IDX ON HSR_HC_PTCPT_TBL(HSR_ID);

-- @INDEX
-- LOOKUP BY HEALTHCARE PARTICIPANT NEEDS TO BE INDEXED
CREATE INDEX HSR_HC_PTCPT_TBL_PTCPT_ID ON HC_PTCPT_TBL(PTCPT_ID);

-- @INDEX
-- LOOKUP BY HEALTHCARE ORIGINAL IDENTIFIER
CREATE INDEX HSR_HC_PTCPT_TBL_PTCPT_HSR_CLS_IDX ON HSR_HC_PTCPT_TBL(HSR_ID, PTCPT_ID, PTCPT_CLS);


-- @TABLE
-- HEALTHCARE SERVICE RECORD TO HEALTHCARE PARTICIPANT TABLE ORIGINAL IDENTIFICATION ASSOCIATION
-- 
-- PURPOSE: LINKS ONE OR MORE ORIGINAL IDENTIFIERS TO A HSR_HC_PTCPT_TBL ASSOCIATION
--
CREATE TABLE HSR_HC_PTCPT_ORIG_ID_TBL
(
	HSR_ID	DECIMAL(20,0) NOT NULL,
	PTCPT_ID	DECIMAL(20,0) NOT NULL,
	PTCPT_CLS	DECIMAL(8) NOT NULL,
	ORIG_ID_DOMAIN	VARCHAR(255) NOT NULL,
	ORIG_ID		VARCHAR(255),
	LICENSE_IND	BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT PK_HSR_HC_PTCPT_ORIG_ID_TBL PRIMARY KEY (HSR_ID, PTCPT_ID, PTCPT_CLS, ORIG_ID_DOMAIN),
	CONSTRAINT FK_HSR_HC_PTCPT_ORIG_ID_HSR_HC_PTCPT_TBL FOREIGN KEY (HSR_ID, PTCPT_ID, PTCPT_CLS) REFERENCES HSR_HC_PTCPT_TBL(HSR_ID, PTCPT_ID, PTCPT_CLS)
);

-- @INDEX
-- LOOKUPS BY PARTICIPANT LINK MUST BE INDEXED
CREATE INDEX HSR_HC_PTCPT_ORIG_ID_IDX ON HSR_HC_PTCPT_ORIG_ID_TBL(HSR_ID, PTCPT_ID, PTCPT_CLS);

-- @SEQUENCE
-- SURROGATE KEY GENERATOR FOR HEALTHCARE PARTICIPANT TELECOM ID
CREATE SEQUENCE HC_PTCPT_TEL_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- HEALTHCARE PARTICIPANT TELECOMMUNICATIONS ADDRESS TABLE
--
-- PURPOSE: USED TO LINK ONE OR MORE TELECOMMUNICATIONS ADDRESSES (EMAIL, TELEPHONE, ETC...) TO A
--	    HEALTHCARE PROVIDER
--
CREATE TABLE HC_PTCPT_TEL_TBL
(
	TEL_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('HC_PTCPT_TEL_SEQ'), -- UNIQUELY IDENTIFIES THIS TELECOMMUNICATIONS ADDRESS
	TEL_USE		VARCHAR(4) NOT NULL, -- IDENTIFIES HOW THE TELECOMMUNICATIONS ADDRESS IS TO BE USED
	PTCPT_ID	DECIMAL(20,0) NOT NULL, -- IDENTIFIE THE PARTICIPANT THAT USES THIS TELECOMMUNICATIONS ADDRESS
	TEL_VALUE	VARCHAR(255) NOT NULL, -- IDENTIFIES THE ACTUAL TELECOMMUNICATIONS ADDRESS
	CONSTRAINT PK_HC_PTCPT_TEL_TBL PRIMARY KEY (TEL_ID),
	CONSTRAINT FK_PTCPT_ID_PTCPT_TBL FOREIGN KEY (PTCPT_ID) REFERENCES HC_PTCPT_TBL(PTCPT_ID)
);

-- @TABLE
-- HEALTHCARE PARTICIPANT ALTERNATE IDENTIFIERS TABLE
--
-- PURPOSE: USED TO LINK ONE OR MORE EXTERNAL IDENTIFIES TO A HEALTHCARE PARTICIPANT
--
CREATE TABLE HC_PTCPT_ALT_ID_TBL
(
	ALT_ID_DOMAIN	VARCHAR(255) NOT NULL,
	PTCPT_ID	DECIMAL(20,0) NOT NULL,
	ALT_ID		VARCHAR(48),
	CONSTRAINT PK_HC_PTCPT_ALT_ID_TBL PRIMARY KEY (ALT_ID_DOMAIN, PTCPT_ID),
	CONSTRAINT FK_PTCPT_ID_HC_PTCPT_TBL FOREIGN KEY (PTCPT_ID) REFERENCES HC_PTCPT_TBL(PTCPT_ID)
);

-- @INDEX 
-- ALTERNATE IDENTIFIER LOOKUPS BY ALT ID NEED TO BE INDEXED
CREATE UNIQUE INDEX HC_PTCPT_ALT_ID_TBL_ALT_ID_IDX ON HC_PTCPT_ALT_ID_TBL(ALT_ID_DOMAIN,ALT_ID);


-- @INDEX
-- ALTERNATE IDENTIFIER LOOKUPS BY PARTICIPANT ID NEED TO BE INDEXED
CREATE INDEX HC_PTCPT_ALT_ID_TBL_PTCPT_ID_IDX ON HC_PTCPT_ALT_ID_TBL(PTCPT_ID);

-- @VIEW
-- HEALTHCARE PARTICIPANT VIEW
CREATE VIEW HSR_HC_PTCPT_VW AS
	SELECT HSR_HC_PTCPT_TBL.HSR_ID, PTCPT_ID, PTCPT_CLS, PTCPT_REP_ORG_ID, ORIG_ID_DOMAIN, ORIG_ID, LICENSE_IND
	FROM HSR_HC_PTCPT_TBL NATURAL JOIN HSR_HC_PTCPT_ORIG_ID_TBL;

-- @VIEW
-- SERVICE DELIVERY LOCATION VIEW
CREATE VIEW HSR_SDL_VW AS
	SELECT HSR_SDL_TBL.HSR_ID, SDL_CLS, SDL_TBL.SDL_ID, SDL_NAME, SDL_ADDR_SET_ID, SDL_TYP_CD_ID
	FROM HSR_SDL_TBL INNER JOIN SDL_TBL USING (SDL_ID);

-- @VIEW
-- HEALTH SERVICES RECORD LATEST VERSION VIEW
CREATE VIEW HSR_LTST_CRNT_VRSN_VW AS
	SELECT DISTINCT ON (HSR_TBL.HSR_ID) HSR_VRSN_TBL.*, HSR_TBL.HSR_CLS
	FROM HSR_TBL LEFT JOIN HSR_VRSN_TBL USING (HSR_ID) 
	ORDER BY HSR_TBL.HSR_ID, CRTN_UTC DESC;

-- @VIEW
-- HEALTH SERVICES RECORD ALL VERSIONS VIEW
CREATE VIEW HSR_VW AS
	SELECT HSR_VRSN_TBL.*, HSR_TBL.HSR_CLS
	FROM HSR_TBL LEFT JOIN HSR_VRSN_TBL USING(HSR_ID) 
	ORDER BY HSR_TBL.HSR_ID, CRTN_UTC DESC;
-- @SEQUENCE
-- COMPONENT SEQUENCE
CREATE SEQUENCE CMP_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- HEALTH SERVICE RECORD COMPONENTS TABLE
--
-- PURPOSE: KEEPS TRACK OF ALL THE COMPONENTS A PARTICULAR HSR_VERSION HAS
--
CREATE TABLE CMP_TBL
(
	CMP_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('cmp_seq'),
	CNTR_TYP	VARCHAR(255) NOT NULL,
	CNTR_TBL_ID	DECIMAL(20,0) NOT NULL,
	CNTR_VRSN_ID	DECIMAL(20,0),
	CMP_TYP		VARCHAR(255) NOT NULL,
	CMP_TBL_ID	DECIMAL(20,0) NOT NULL,
	CMP_VRSN_ID	DECIMAL(20,0), 
	CMP_ROL_TYP	DECIMAL(8,0) NOT NULL,
	CONSTRAINT PK_HSR_CMP_TBL PRIMARY KEY (CMP_ID)
);

-- @INDEX
-- LOOKUP COMPONENT BY VERSION ID SHOULD BE INDEXED
CREATE INDEX CMP_CNTR_IDX ON CMP_TBL(CNTR_TBL_ID);

-- @INDEX
-- LOOKUP COMPONENT BY COMPONENT IDENTIFIER
CREATE INDEX CMP_CMP_IDX ON CMP_TBL(CMP_TBL_ID);

-- @SEQUENCE
-- CUSTODIAL DEVICE ID
CREATE SEQUENCE DEV_SEQ START WITH 1 INCREMENT BY 1;

-- @TABLE
-- CUSTODIAL DEVICES
CREATE TABLE DEV_TBL
(
	DEV_ID		DECIMAL(20,0) NOT NULL DEFAULT nextval('DEV_SEQ'), -- UNIQUE IDENTIFIER FOR THE DEVICE
	DEV_ROOT	VARCHAR(255) NOT NULL, -- ROOT IDENTIFIER FOR THE DEVICE
	DEV_EXT 	VARCHAR(255), -- EXTENSION IDENTIFIER FOR DEVICE
	DEV_NAME	TEXT, -- DEVICE NAME
	DEV_JUR		TEXT, -- JURISDICTION
	CONSTRAINT PK_DEV_TBL PRIMARY KEY (DEV_ID)
);

-- @INDEX 
-- LOOKUP DEVICE BY ROOT/EXT 
CREATE UNIQUE INDEX DEV_EXT_ID_IDX ON DEV_TBL(DEV_ROOT, DEV_EXT);

-- @FUNCTION
-- GET DATABASE SCHEMA VERSION
--
-- RETURNS: THE MAJOR, MINOR AND RELEASE NUMBER OF THE DATABASE SCHEMA
CREATE OR REPLACE FUNCTION GET_SCH_VER() RETURNS VARCHAR AS
$$
BEGIN
	RETURN '0.8.0.0';
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NEW CODE
--
-- RETURNS: THE IDENTIFIER OF THE CODE
CREATE OR REPLACE FUNCTION CRT_CODE
(
	CD_VAL_IN		IN VARCHAR(255),
	CD_DOMAIN_IN		IN VARCHAR(255),
	ORG_CNT_TYP_IN		IN VARCHAR(255),
	ORG_TEXT_IN		IN BYTEA,
	CD_VRSN_IN		IN VARCHAR(24),
	CD_QLFYS_CD_ID_IN	IN DECIMAL(20,0),
	CD_QLFYS_AS_IN		IN CHAR(1),
	CD_QLFYS_KV_ID_IN	IN VARCHAR(48),
	CAN_SHARE		IN BOOLEAN
) RETURNS DECIMAL
AS 
$$
DECLARE	
	CD_ID_VAL	DECIMAL(20,0);
BEGIN
	CD_ID_VAL := NULL;
	IF CAN_SHARE = TRUE THEN
		SELECT CD_ID INTO CD_ID_VAL FROM CD_TBL WHERE CD_VAL = CD_VAL_IN AND CD_DOMAIN = CD_DOMAIN_IN AND 
			(ORG_CNT_TYP_IN IS NULL AND ORG_CNT_TYP IS NULL OR ORG_CNT_TYP = ORG_CNT_TYP_IN) AND 
			(ORG_TEXT IS NULL AND ORG_TEXT_IN IS NULL OR ORG_TEXT = ORG_TEXT_IN) AND 
			(CD_VRSN IS NULL AND CD_VRSN_IN IS NULL OR CD_VRSN = CD_VRSN_IN);
	END IF;
	IF(CD_ID_VAL IS NULL) THEN
		CD_ID_VAL := NEXTVAL('cd_seq');
		INSERT INTO CD_TBL (CD_ID, CD_VAL, CD_DOMAIN, ORG_CNT_TYP, ORG_TEXT, CD_VRSN, CD_QLFYS, CD_QLFYS_AS, CD_QLFYS_KV_ID)
			VALUES (CD_ID_VAL, CD_VAL_IN, CD_DOMAIN_IN, ORG_CNT_TYP_IN, ORG_TEXT_IN, CD_VRSN_IN, CD_QLFYS_CD_ID_IN, CD_QLFYS_AS_IN, CD_QLFYS_KV_ID_IN);
	END IF;
	RETURN CD_ID_VAL;

END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A CODE
--
-- RETURNS: THE SPECIFIED CODE
CREATE OR REPLACE FUNCTION GET_CODE
(
	CD_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF CD_TBL AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM CD_TBL WHERE CD_ID = CD_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION 
-- GET CODE QUALIFIERS
--
-- RETURNS: SPECIFIED CODE QUALIFIERS
CREATE OR REPLACE FUNCTION GET_CODE_QLFYS
(
	CD_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF CD_TBL AS
$$
BEGIN
	RETURN QUERY SELECT * FROM CD_TBL WHERE CD_QLFYS = CD_ID_IN;
END;
$$ LANGUAGE plpgsql;


-- @FUNCTION
-- CREATE A NEW NAME COMPONENT
-- 
-- RETURNS: THE ID OF THE NAME COMPONENT
CREATE OR REPLACE FUNCTION CRT_NAME_CMP
(
	NAME_VALUE_IN		VARCHAR(255),
	NAME_CLS_IN		DECIMAL(4),
	NAME_SET_ID_IN		DECIMAL(20,0)
) RETURNS DECIMAL
AS
$$
DECLARE
	NAME_CMP_ID_VAL	DECIMAL;
	NAME_VALUE_ID   DECIMAL;
BEGIN

	NAME_CMP_ID_VAL := nextval('NAME_CMP_SEQ');

	-- GET THE NAME VALUE
	SELECT NAME_ID INTO NAME_VALUE_ID FROM NAME_CDTBL WHERE NAME_VALUE = NAME_VALUE_IN ORDER BY NAME_ID ASC LIMIT 1;

	-- SOMETIMES WHEN SOMEONE IS REGISTERED WITH THE SAME NAME AT THE EXACT SAME MOMENT IN TIME
	-- THERE WILL BE DUPLICATE IDENTIFIERS IN THE DATABASE, LETS TAKE THIS OPPORTUNITY TO CORRECT THESE
	IF (SELECT COUNT(NAME_ID) FROM NAME_CDTBL WHERE NAME_VALUE = NAME_VALUE_IN) > 1 THEN 
		UPDATE NAME_CMP_TBL SET NAME_CMP_VALUE = NAME_VALUE_ID WHERE
			NAME_CMP_VALUE IN (SELECT COUNT(NAME_ID) FROM NAME_CDTBL WHERE NAME_VALUE = NAME_VALUE_IN);
	END IF;
	
	IF(NAME_VALUE_ID IS NULL) THEN
		NAME_VALUE_ID := nextval('NAME_CMP_SEQ');
		INSERT INTO NAME_CDTBL (NAME_ID, NAME_VALUE, NAME_SOUNDEX) VALUES
			(NAME_VALUE_ID, NAME_VALUE_IN, SOUNDEX(NAME_VALUE_IN));
	END IF;
	INSERT INTO NAME_CMP_TBL (NAME_CMP_ID, NAME_CMP_CLS, NAME_CMP_VALUE, NAME_SET_ID)
		VALUES(NAME_CMP_ID_VAL, COALESCE(NAME_CLS_IN, 1), NAME_VALUE_ID, COALESCE(NAME_SET_ID_IN, NAME_CMP_ID_VAL));
	RETURN NAME_CMP_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NAME SET ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION CRT_PSN_NAME_SET
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	NAME_SET_USE_IN		IN DECIMAL(5)
) RETURNS DECIMAL
AS
$$
DECLARE
	PSN_NAME_SET_ID DECIMAL;
BEGIN
	PSN_NAME_SET_ID := nextval('NAME_CMP_SEQ');
	INSERT INTO PSN_NAME_SET_TBL (NAME_SET_ID, NAME_SET_USE, PSN_ID, EFFT_VRSN_ID) VALUES
		(PSN_NAME_SET_ID, NAME_SET_USE_IN, PSN_ID_IN, PSN_VRSN_ID_IN);
	RETURN PSN_NAME_SET_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- OBSOLETE NAME SET ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION OBSLT_PSN_NAME_SET
(
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	NAME_SET_ID_IN		IN DECIMAL(20,0)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_NAME_SET_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE NAME_SET_ID = NAME_SET_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A NAME SET
--
-- RETURNS: A SET OF NAME_CMP_TBL RECORDS REPRESENTING THE SET
CREATE OR REPLACE FUNCTION GET_NAME_SET
(
	NAME_SET_ID_IN		IN DECIMAL(20)
) RETURNS SETOF NAME_CMP_VW
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM NAME_CMP_VW WHERE NAME_SET_ID = NAME_SET_ID_IN ORDER BY NAME_CMP_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL NAME SETS FOR A SPECIFIC PERSON AT A SPECIFIC VERSION
CREATE OR REPLACE FUNCTION GET_PSN_NAME_SETS
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_NAME_SET_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_NAME_SET_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NEW ADDRESS COMPONENT
-- 
-- RETURNS: THE ID OF THE ADDRESS COMPONENT
CREATE OR REPLACE FUNCTION CRT_ADDR_CMP
(
	ADDR_VALUE_IN		VARCHAR(255),
	ADDR_CLS_IN		DECIMAL(4),
	ADDR_SET_ID_IN		DECIMAL(20,0)
) RETURNS DECIMAL
AS
$$
DECLARE
	ADDR_CMP_ID_VAL	DECIMAL;
	ADDR_VALUE_ID DECIMAL;
BEGIN

	ADDR_CMP_ID_VAL := nextval('ADDR_CMP_SEQ');

	-- GET THE ADDR VALUE
	SELECT ADDR_ID INTO ADDR_VALUE_ID FROM ADDR_CDTBL WHERE ADDR_VALUE = ADDR_VALUE_IN ORDER BY ADDR_ID ASC LIMIT 1;

	-- SOMETIMES WHEN SOMEONE IS REGISTERED WITH THE SAME NAME AT THE EXACT SAME MOMENT IN TIME
	-- THERE WILL BE DUPLICATE IDENTIFIERS IN THE DATABASE, LETS TAKE THIS OPPORTUNITY TO CORRECT THESE
	IF (SELECT COUNT(ADDR_ID) FROM ADDR_CDTBL WHERE ADDR_VALUE = ADDR_VALUE_IN) > 1 THEN 
		UPDATE ADDR_CMP_TBL SET ADDR_CMP_VALUE = ADDR_VALUE_ID WHERE
			ADDR_CMP_VALUE IN (SELECT COUNT(ADDR_ID) FROM ADDR_CDTBL WHERE ADDR_VALUE = ADDR_VALUE_IN);
	END IF;

	-- INSERT INTO ADDR CDTBL IF NEEDED
	IF(ADDR_VALUE_ID IS NULL) THEN
		ADDR_VALUE_ID := nextval('ADDR_CMP_SEQ');
		INSERT INTO ADDR_CDTBL (ADDR_ID, ADDR_VALUE) VALUES
			(ADDR_VALUE_ID, ADDR_VALUE_IN);
	END IF;

	INSERT INTO ADDR_CMP_TBL (ADDR_CMP_ID, ADDR_CMP_CLS, ADDR_CMP_VALUE, ADDR_SET_ID)
		VALUES(ADDR_CMP_ID_VAL, ADDR_CLS_IN, ADDR_VALUE_ID, COALESCE(ADDR_SET_ID_IN, ADDR_CMP_ID_VAL));
	RETURN ADDR_CMP_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A ADDRESS SET ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION CRT_PSN_ADDR_SET
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	ADDR_SET_USE_IN		IN DECIMAL(32)
) RETURNS DECIMAL
AS
$$
DECLARE
	PSN_ADDR_SET_ID DECIMAL;
BEGIN
	PSN_ADDR_SET_ID := nextval('ADDR_CMP_SEQ');
	INSERT INTO PSN_ADDR_SET_TBL (ADDR_SET_ID, ADDR_SET_USE, PSN_ID, EFFT_VRSN_ID) VALUES
		(PSN_ADDR_SET_ID, ADDR_SET_USE_IN, PSN_ID_IN, PSN_VRSN_ID_IN);
	RETURN PSN_ADDR_SET_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- OBSOLETE ADDRESS SET ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION OBSLT_PSN_ADDR_SET
(
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	ADDR_SET_ID_IN		IN DECIMAL(20,0)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_ADDR_SET_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE ADDR_SET_ID = ADDR_SET_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET THE CONTENTS OF AN ADDRESS SET
CREATE OR REPLACE FUNCTION GET_ADDR_SET
(
	ADDR_SET_ID_IN		IN DECIMAL(20)
) RETURNS SETOF ADDR_CMP_VW
AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM ADDR_CMP_VW WHERE ADDR_SET_ID = ADDR_SET_ID_IN ORDER BY ADDR_CMP_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL ADDRESS SETS FOR A SPECIFIC PERSON AT A SPECIFIC VERSION
CREATE OR REPLACE FUNCTION GET_PSN_ADDR_SETS
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_ADDR_SET_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_ADDR_SET_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NEW TIMESTAMP 
--
-- RETURNS: THE ID OF THE TIMESTAMP RECORD
CREATE OR REPLACE FUNCTION CRT_TS
(
	TS_VALUE_IN		TIMESTAMPTZ,
	TS_PRECISION_IN		CHAR(1),
	TS_CLS_IN		CHAR(1),
	TS_SET_ID_IN		DECIMAL(20,0)
) RETURNS DECIMAL
AS
$$
DECLARE
	TS_ID_VAL	DECIMAL;
BEGIN
	TS_ID_VAL := nextval('TS_SEQ');
	INSERT INTO TS_TBL(TS_ID, TS_VALUE, TS_PRECISION, TS_CLS, TS_SET_ID)
		VALUES (TS_ID_VAL, TS_VALUE_IN, TS_PRECISION_IN, TS_CLS_IN, COALESCE(TS_SET_ID_IN, TS_ID_VAL));
	RETURN TS_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A TIMESTAMP AS A SET
CREATE OR REPLACE FUNCTION GET_TS_SET
(
	TS_SET_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF TS_TBL AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM TS_TBL WHERE TS_SET_ID = TS_SET_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @REGION
-- CLIENT FUNCTIONS

-- @PROCEDURE
-- CREATE AN ALTERNATIVE IDENTIFIER FOR THE CLIENT
CREATE OR REPLACE FUNCTION CRT_PSN_ALT_ID
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	IS_HCN_IN		IN BOOLEAN,
	IS_PRVT_IN		IN BOOLEAN,
	ID_PURP_IN		IN DECIMAL(20, 0), 
	ID_DOMAIN_IN		IN VARCHAR(256),
	ID_VALUE_IN		IN VARCHAR(256),
	ID_AUTH_IN		IN VARCHAR(256)
) RETURNS VOID AS
$$
BEGIN
	IF NOT IS_PRVT_IN AND EXISTS (SELECT PSN_ID FROM PSN_ALT_ID_TBL WHERE PSN_ID <> PSN_ID_IN AND ID_DOMAIN = ID_DOMAIN_IN AND ID_VALUE = ID_VALUE_IN AND IS_HCN = TRUE AND OBSLT_VRSN_ID IS NULL) THEN
		RAISE EXCEPTION 'CR002: ALTERNATE IDENTIFIER ALREADY REGISTERED';
	--ELSIF NOT IS_PRVT_IN AND EXISTS (SELECT PSN_ID FROM PSN_ALT_ID_TBL WHERE ID_DOMAIN = ID_DOMAIN_IN AND ID_VALUE <> ID_VALUE_IN AND PSN_ID = PSN_ID_IN AND IS_HCN = TRUE AND OBSLT_VRSN_ID IS NULL) THEN
	--	RAISE EXCEPTION 'CR003: PERSON ALREADY HAS AN ACTIVE IDENTIFIER IN SPECIFIED DOMAIN';
	END IF;
	INSERT INTO PSN_ALT_ID_TBL (ID_DOMAIN, ID_VALUE, PSN_ID, EFFT_VRSN_ID, IS_HCN, ID_PURP_CD_ID, ID_AUTH, IS_PRVT)
		VALUES (ID_DOMAIN_IN, ID_VALUE_IN, PSN_ID_IN, PSN_VRSN_ID_IN, IS_HCN_IN, ID_PURP_IN, ID_AUTH_IN, IS_PRVT_IN);
	RETURN;
EXCEPTION
	WHEN unique_violation THEN
		RAISE NOTICE 'CR002: ALTERNATE IDENTIFIER ALREADY REGISTERED';
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- OBSOLETE ALTERNATE ID ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION OBSLT_PSN_ALT_ID
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	ID_DOMAIN_IN		IN VARCHAR(256),
	ID_VALUE_IN		IN VARCHAR(256)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_ALT_ID_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE ID_DOMAIN = ID_DOMAIN_IN AND ID_VALUE = ID_VALUE_IN AND PSN_ID = PSN_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALTERNATE IDENTIFIERS 
CREATE OR REPLACE FUNCTION GET_PSN_ALT_ID
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_ALT_ID_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_ALT_ID_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE CLIENT TELECOM DATA
CREATE OR REPLACE FUNCTION CRT_PSN_TEL
(
	PSN_ID_IN	IN DECIMAL(20,0),
	PSN_VRSN_ID_IN	IN DECIMAL(20,0),
	TELECOM_IN	IN VARCHAR(512),
	TELECOM_USE_IN	IN VARCHAR(32),
	TELECOM_CAP_IN	IN VARCHAR(32)
) RETURNS DECIMAL AS
$$
DECLARE
	PSN_TEL_NO	DECIMAL(20,0);
BEGIN
	PSN_TEL_NO := nextval('PSN_TEL_SEQ');
	INSERT INTO PSN_TEL_TBL (TEL_ID, TEL_VALUE, TEL_USE, TEL_CAP, PSN_ID, EFFT_VRSN_ID) VALUES
		(PSN_TEL_NO, TELECOM_IN, TELECOM_USE_IN, TELECOM_CAP_IN, PSN_ID_IN, PSN_VRSN_ID_IN);

	RETURN PSN_TEL_NO;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- OBSOLETE ADDRESS SET ASSOCIATED WITH A PERSON
CREATE OR REPLACE FUNCTION OBSLT_PSN_TEL
(
	PSN_ID_IN		IN DECIMAL(20),
	TEL_VALUE_IN		IN VARCHAR(256),
	TEL_USE_IN		IN VARCHAR(32),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_TEL_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE TEL_VALUE = TEL_VALUE_IN AND TEL_USE = TEL_USE_IN AND PSN_ID = PSN_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET TELECOM DATA
CREATE OR REPLACE FUNCTION GET_PSN_TELS
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_TEL_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_TEL_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET MOST CURRENT VERSION OF PERSON DATA BASED ON THE ID
--
-- RETURNS: TABLE OF DATA 
CREATE OR REPLACE FUNCTION GET_PSN_CRNT_VRSN
(
	PSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_VRSN_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_VRSN_TBL WHERE PSN_ID = PSN_ID_IN ORDER BY PSN_VRSN_ID DESC LIMIT 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET SPECIFIC VERSION OF A PERSON
--
-- RETURNS: TABLE OF DATA 
CREATE OR REPLACE FUNCTION GET_PSN_VRSN
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_VRSN_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_VRSN_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID = PSN_VRSN_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A CLIENT BASED ON AN EXTERNAL IDENTIFIER
--
-- RETURNS: TABLE OF CLIENT DATA
CREATE OR REPLACE FUNCTION GET_PSN_EXTERN
(
	ID_DOMAIN_IN		IN VARCHAR(48),
	ID_VALUE_IN		IN VARCHAR(48)
) RETURNS SETOF PSN_VRSN_TBL AS
$$
BEGIN
	RETURN QUERY SELECT PSN_VRSN_TBL.* FROM PSN_VRSN_TBL NATURAL JOIN PSN_ALT_ID_TBL WHERE
		ID_DOMAIN = ID_DOMAIN_IN AND 
		ID_VALUE = ID_VALUE_IN AND
		OBSLT_VRSN_ID IS NULL
		ORDER BY PSN_VRSN_TBL.PSN_VRSN_ID DESC
		;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NEW PERSON IN THE DATABASE
-- 
-- RETURNS: THE CRID OF THE CLIENT
CREATE OR REPLACE FUNCTION CRT_PSN
(
	REG_VRSN_ID_IN		IN DECIMAL(20,0),
	STATUS_IN		IN VARCHAR(12),
	GNDR_CS_IN		IN CHAR(1),
	BRTH_TS_IN		IN DECIMAL,
	MB_ORD_IN		IN DECIMAL(2),
	RLGN_CD_ID_IN		IN DECIMAL(20,0),
	VIP_CD_ID_IN		IN DECIMAL(20,0),
	MRTL_STS_CD_ID_IN	IN DECIMAL(20,0),
	BRTH_SDL_ID_IN		IN DECIMAL(20,0)
) RETURNS TABLE
(
	ID		DECIMAL(20,0),
	VRSN_ID	DECIMAL(20,0)
)
AS
$$
DECLARE
	NEW_ID		DECIMAL;
	NEW_VRSN_ID	DECIMAL;
BEGIN
	NEW_ID := nextval('PSN_SEQ');
	NEW_VRSN_ID := nextval('PSN_SEQ');

	-- INSERT CLIENT DATA
	INSERT INTO PSN_TBL (PSN_ID)
		VALUES (NEW_ID);

	-- INSERT VERSION
	INSERT INTO PSN_VRSN_TBL (PSN_VRSN_ID, PSN_ID, REG_VRSN_ID, STATUS, CRT_UTC, GNDR_CS, BRTH_TS, MB_ORD, RLGN_CD_ID, VIP_CD_ID, MRTL_STS_CD_ID, BRTH_SDL_ID)
		VALUES (NEW_VRSN_ID, NEW_ID, REG_VRSN_ID_IN, STATUS_IN, CURRENT_TIMESTAMP, GNDR_CS_IN, BRTH_TS_IN, MB_ORD_IN, RLGN_CD_ID_IN, VIP_CD_ID_IN, MRTL_STS_CD_ID_IN, BRTH_SDL_ID_IN);
	
	-- RETURN SHRID
	RETURN QUERY SELECT NEW_ID, NEW_VRSN_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET THE CURRENT PERSON VERSION
-- 
-- RETURNS: THE CURERNT VERSION ID OF THE SPECIFIED PERSON
CREATE OR REPLACE FUNCTION GET_PSN_CUR_VRSN_ID
(
	PSN_ID_IN	IN DECIMAL(20,0) -- THE ID FOR WHICH THE VERSION IS TO BE RETRIEVED
) RETURNS DECIMAL
AS
$$
BEGIN
	RETURN (SELECT PSN_VRSN_ID FROM GET_PSN_CRNT_VRSN(PSN_ID_IN));
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A VERSION OF A PERSON RECORD
CREATE OR REPLACE FUNCTION CRT_PSN_VRSN
(
	PSN_ID_IN		IN DECIMAL(20,0),
	REG_VRSN_ID_IN		IN DECIMAL(20,0),
	STATUS_IN		IN VARCHAR(12),
	GNDR_CS_IN		IN CHAR(1),
	BRTH_TS_IN		IN DECIMAL,
	DCSD_TS_IN		IN DECIMAL,
	MB_ORD_IN		IN DECIMAL(2),
	RLGN_CD_ID_IN		IN DECIMAL(20,0),
	VIP_CD_ID_IN		IN DECIMAL(20,0),
	MRTL_STS_CD_ID_IN	IN DECIMAL(20,0),
	BRTH_SDL_ID_IN		IN DECIMAL(20,0)	
) RETURNS DECIMAL
AS
$$
DECLARE
	NEW_VRSN_ID	DECIMAL;
	PSN_CUR_VRSN_ID DECIMAL;
BEGIN
	NEW_VRSN_ID := nextval('PSN_SEQ');

	-- GET THE CURRENT VERSION IDENTIFIER
	SELECT GET_PSN_CUR_VRSN_ID(PSN_ID_IN) INTO PSN_CUR_VRSN_ID;

	-- SANITY CHECK
	IF PSN_CUR_VRSN_ID IS NULL THEN
		RAISE EXCEPTION 'CR001: CANNOT INSERT VERSION FOR NON-EXISTANT PSN';
	END IF;
	
	-- GET THE NEW VERSION ID
	NEW_VRSN_ID := nextval('HSR_SEQ');
	
	-- DUPLICATE THE CURRENT VERSION RECORD INTO THE NEW VERSION RECORD
	INSERT INTO PSN_VRSN_TBL 
		SELECT 
			NEW_VRSN_ID,
			PSN_ID_IN,
			PSN_CUR_VRSN_ID,
			REG_VRSN_ID_IN,
			COALESCE(STATUS_IN, STATUS),
			CURRENT_TIMESTAMP,
			NULL,
			COALESCE(GNDR_CS_IN, GNDR_CS),
			COALESCE(BRTH_TS_IN, BRTH_TS),
			COALESCE(DCSD_TS_IN, DCSD_TS),
			COALESCE(MB_ORD_IN, MB_ORD),
			COALESCE(RLGN_CD_ID_IN, RLGN_CD_ID),
			COALESCE(VIP_CD_ID_IN, VIP_CD_ID),
			COALESCE(MRTL_STS_CD_ID_IN, MRTL_STS_CD_ID),
			COALESCE(BRTH_SDL_ID_IN, BRTH_SDL_ID)
		FROM PSN_VRSN_TBL WHERE
			PSN_VRSN_ID = PSN_CUR_VRSN_ID;

	-- OBSOLETE THE OLD VERSION
	UPDATE PSN_VRSN_TBL SET OBSLT_UTC = CURRENT_TIMESTAMP
		WHERE PSN_VRSN_ID = PSN_CUR_VRSN_ID;

	-- RETURN NEW VERSION ID
	RETURN NEW_VRSN_ID;		

END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- DELETE A PERSON
CREATE OR REPLACE FUNCTION DEL_PSN
(
	PSN_ID_IN	IN DECIMAL(20,0),
	REG_VRSN_ID_IN	IN DECIMAL(20,0)
) RETURNS VOID AS
$$
BEGIN
	SELECT CRT_PSN_VRSN(PSN_ID_IN, REG_VRSN_ID_IN, 'Nullified', NULL, NULL, NULL, NULL, NULL);
END;
$$ LANGUAGE plpgsql;
	
-- @PROCEDURE
-- LINK TWO CLIENTS TOGETHER
CREATE OR REPLACE FUNCTION CRT_PSN_RLTNSHP
(
	SRC_PSN_ID_IN		IN DECIMAL(20),
	TRG_PSN_ID_IN		IN DECIMAL(20),
	STATUS_CS_IN		IN VARCHAR(10),
	KIND_IN			IN VARCHAR(10)
) RETURNS DECIMAL AS 
$$
DECLARE
	RLTNSHP_ID_ID	DECIMAL;
	SRC_VRSN_ID	DECIMAL;
BEGIN
	-- IS THERE AN ACTIVE RELATIONSHIP FOR THIS KIND ALREADY? 
	SELECT RLTNSHP_ID INTO RLTNSHP_ID_ID FROM PSN_RLTNSHP_TBL WHERE 
		SRC_PSN_ID = SRC_PSN_ID_IN AND
		TRG_PSN_ID = TRG_PSN_ID_IN AND
		KIND_CS = KIND_IN AND
		OBSLT_VRSN_ID IS NULL;

	-- YES? 
	IF(RLTNSHP_ID_ID IS NOT NULL) THEN
		RETURN RLTNSHP_ID_ID;
	ELSE -- NO
		SELECT GET_PSN_CUR_VRSN_ID(TRG_PSN_ID_IN) INTO SRC_VRSN_ID;
		RLTNSHP_ID_ID := nextval('PSN_RLTNSHP_SEQ');
		INSERT INTO PSN_RLTNSHP_TBL (RLTNSHP_ID, SRC_PSN_ID, TRG_PSN_ID, KIND_CS, EFFT_VRSN_ID, STATUS_CS) VALUES
			(RLTNSHP_ID_ID, SRC_PSN_ID_IN, TRG_PSN_ID_IN, KIND_IN, SRC_VRSN_ID, COALESCE(STATUS_CS_IN, 'Active'));
	END IF;

	RETURN RLTNSHP_ID_ID;
END
$$ LANGUAGE plpgsql;

--@FUNCTION
-- GET PERSONAL RELATIONSHIP BY PERSONAL RELATIONSHIP IDENTIFIER
CREATE OR REPLACE FUNCTION GET_PSN_RLTNSHPS
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_RLTNSHP_TBL
AS
$$
BEGIN
	IF PSN_VSN_ID_IN IS NULL THEN
		SELECT GET_PSN_CUR_VRSN_ID(PSN_ID_IN) INTO PSN_VRSN_ID_IN;
	END IF;
	RETURN QUERY SELECT * FROM PSN_RLTNSHP_TBL WHERE SRC_PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

--@FUNCTION
-- GET PERSONAL RELATIONSHIP BBY THE PARTICIPATING PARTIES
CREATE OR REPLACE FUNCTION GET_PSN_RLTNSHP
(
	SRC_PSN_ID_IN		IN DECIMAL(20),
	SRC_PSN_VRSN_ID_IN	IN DECIMAL(20,0),
	TRG_PSN_ID_IN		IN DECIMAL(20)
) RETURNS SETOF PSN_RLTNSHP_TBL
AS
$$
BEGIN
	IF SRC_PSN_VRSN_ID_IN IS NULL THEN
		SELECT GET_PSN_CUR_VRSN_ID(PSN_ID_IN) INTO SRC_PSN_VRSN_ID_IN;
	END IF;
	RETURN QUERY SELECT * FROM PSN_RLTNSHP_TBL WHERE SRC_PSN_ID = SRC_PSN_ID_IN AND TRG_PSN_ID = TRG_PSN_ID_IN AND SRC_PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION 
-- OBSOLETE A RELATIONSHIP
CREATE OR REPLACE FUNCTION OBSLT_PSN_RLTNSHP
(
	SRC_PSN_ID_IN		IN DECIMAL(20),
	SRC_PSN_VRSN_ID_IN	IN DECIMAL(20,0),
	TRG_PSN_ID_IN		IN DECIMAL(20,0),
	KIND_CS_IN		IN VARCHAR(10)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_RLTNSHP_TBL SET OBSLT_VRSN_ID = SRC_PSN_VRSN_ID_IN WHERE SRC_PSN_ID = SRC_PSN_ID_IN AND TRG_PSN_ID = TRG_PSN_ID_IN AND 
		KIND_CS = KIND_CS_IN;
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- CREATE A RACE CODE
CREATE OR REPLACE FUNCTION CRT_PSN_RACE
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20),
	RACE_CD_ID_IN		IN DECIMAL(20)
) RETURNS VOID AS 
$$
BEGIN
	INSERT INTO PSN_RACE_TBL (PSN_ID, RACE_CD_ID, EFFT_VRSN_ID) VALUES
		(PSN_ID_IN, RACE_CD_ID_IN, PSN_VRSN_ID_IN);
	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A LINK BETWEEN PERSON(S)
CREATE OR REPLACE FUNCTION CRT_PSN_LNK
(
	PSN_ID_IN	IN DECIMAL(20,0),
	PSN_VRSN_ID_IN	IN DECIMAL(20,0), 
	LNK_PSN_ID_IN	IN DECIMAL(20,0),
	LNK_CLS_IN	IN DECIMAL(20),
	SYMBOLIC_IN	IN BOOLEAN
) RETURNS VOID AS $$
BEGIN
	INSERT INTO PSN_LNK_TBL (PSN_ID, CMP_PSN_ID, LNK_CLS, SYMBOLIC, EFFT_VRSN_ID) VALUES
		(PSN_ID_IN, LNK_PSN_ID_IN, LNK_CLS_IN, SYMBOLIC_IN, PSN_VRSN_ID_IN);
END
$$ LANGUAGE plpgsql;


--@FUNCTION
-- GET PERSON RACES
CREATE OR REPLACE FUNCTION GET_PSN_RACES
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_RACE_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_RACE_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET PERSON REGISTRATION EVENT
CREATE OR REPLACE FUNCTION GET_PSN_REG_EVT
(
	REG_EVT_IDS	IN DECIMAL[]
) RETURNS TABLE (HSR_ID DECIMAL) AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM HSR_VRSN_TBL INNER JOIN PSN_VRSN_TBL ON (PSN_VRSN_TBL.REG_VRSN_ID = HSR_VRSN_TBL.HSR_VRSN_ID) 
		WHERE PSN_ID IN (SELECT * FROM REG_EVT_IDS);
END;
$$ LANGUAGE plpgsql;
-- @FUNCTION 
-- OBSOLETE A PERSON RACE
CREATE OR REPLACE FUNCTION OBSLT_PSN_RACE
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	RACE_CD_ID_IN		IN DECIMAL(20,0)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_RACE_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE PSN_ID = PSN_ID_IN AND RACE_CD_ID = RACE_CD_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- CREATE A LANGUAGE CODE
CREATE OR REPLACE FUNCTION CRT_PSN_LANG
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20),
	LANG_CS_IN		IN VARCHAR(3), 
	MODE_CS_IN		IN DECIMAL(1)
) RETURNS DECIMAL AS 
$$
DECLARE
	LANG_ID_ID	DECIMAL;
BEGIN
	LANG_ID_ID = nextval('PSN_LANG_SEQ');
	INSERT INTO PSN_LANG_TBL (LANG_ID, LANG_CS, MODE_CS, PSN_ID, EFFT_VRSN_ID) VALUES
		(LANG_ID_ID, LANG_CS_IN, MODE_CS_IN, PSN_ID_IN, PSN_VRSN_ID_IN);
	RETURN LANG_ID_ID;
END
$$ LANGUAGE plpgsql;

--@FUNCTION
-- GET PERSONS LANGUAGE
CREATE OR REPLACE FUNCTION GET_PSN_LANGS
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_LANG_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_LANG_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION 
-- OBSOLETE A RELATIONSHIP
CREATE OR REPLACE FUNCTION OBSLT_PSN_LANG
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	LANG_CS_IN		IN VARCHAR(3),
	MODE_CS_IN		IN DECIMAL(1)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_LANG_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID WHERE
		PSN_ID = PSN_ID_IN AND LANG_CS = LANG_CS_IN AND MODE_CS = MODE_CS_IN;
END
$$ LANGUAGE plpgsql;


-- @PROCEDURE
-- CREATE AN EMPLOYMENT RECORD
CREATE OR REPLACE FUNCTION CRT_PSN_EMPL
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20),
	EMPL_CD_ID		IN DECIMAL(20),
	EFFT_TS_SET_ID_IN	IN DECIMAL(20),
	STATUS_CD_IN		IN VARCHAR(10)
) RETURNS DECIMAL AS 
$$
DECLARE
	EMP_ID_ID	DECIMAL;
BEGIN
	EMP_ID_ID := nextval('PSN_EMPL_SEQ');
	INSERT INTO PSN_EMPL_TBL (EMPL_ID, PSN_ID, EMPL_CD_ID, EFFT_TS_SET_ID, STATUS_CS, EFFT_VRSN_ID) VALUES
		(EMP_ID_ID, PSN_ID_IN, EMPL_CD_ID_IN, EFFT_TS_SET_ID_IN, COALESCE(STATUS_CS_IN, 'Active'), EFFT_VRSN_ID);
	RETURN EMP_ID_ID;
END
$$ LANGUAGE plpgsql;

--@FUNCTION
-- GET PERSONS CITIZENSHIPS
CREATE OR REPLACE FUNCTION GET_PSN_EMPLS
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_CTZNSHP_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_EMPLS_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION 
-- OBSOLETE A CITIZENSHIP
-- REMARKS : PSN_ID_IN IS KEPT TO KEEP CONSISTENCY ON OBSLT FUNCTION CALLS
CREATE OR REPLACE FUNCTION OBSLT_PSN_EMPL
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	EMPL_ID_IN		IN DECIMAL(20,0)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_CTZNSHP_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID
	WHERE
		PSN_ID = PSN_ID_IN AND EMPL_ID = EMPL_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- CREATE A CITIZENSHIP
CREATE OR REPLACE FUNCTION CRT_PSN_CTZNSHP
(
	PSN_ID_IN		IN DECIMAL(20),
	PSN_VRSN_ID_IN		IN DECIMAL(20),
	NTN_CS_IN		IN CHAR(3),
	NTN_NAME_IN		IN VARCHAR(200),
	EFFT_TS_SET_ID_IN	IN DECIMAL(20),
	STATUS_CD_IN		IN VARCHAR(10)
) RETURNS DECIMAL AS 
$$
DECLARE
	CTZN_ID_ID	DECIMAL;
BEGIN
	CTZN_ID_ID := nextval('NTN_SEQ');
	INSERT INTO PSN_CTZNSHP_TBL (CTZN_ID, PSN_ID, NTN_CS, NTN_NAME, EFFT_TS_SET_ID, STATUS_CS, EFFT_VRSN_ID) VALUES
		(CTZN_ID_ID, PSN_ID_IN, NTN_CS_IN, NTN_NAME_IN, EFFT_TS_SET_ID_IN, COALESCE(STATUS_CS_IN, 'Active'), EFFT_VRSN_ID);
	RETURN CTZN_ID_ID;
END
$$ LANGUAGE plpgsql;

--@FUNCTION
-- GET PERSONS CITIZENSHIPS
CREATE OR REPLACE FUNCTION GET_PSN_CTZNSHPS
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF PSN_CTZNSHP_TBL
AS
$$
BEGIN
	RETURN QUERY SELECT * FROM PSN_CTZNSHP_TBL WHERE PSN_ID = PSN_ID_IN AND PSN_VRSN_ID_IN BETWEEN EFFT_VRSN_ID AND COALESCE(OBSLT_VRSN_ID, 9223372036854775807) - 1;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION 
-- OBSOLETE A CITIZENSHIP
CREATE OR REPLACE FUNCTION OBSLT_PSN_CTZNSHP
(
	PSN_ID_IN		IN DECIMAL(20,0),
	PSN_VRSN_ID_IN		IN DECIMAL(20,0),
	NTN_CS_IN		IN CHAR(3)
) RETURNS VOID 
AS
$$
BEGIN
	UPDATE PSN_CTZNSHP_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID
	WHERE
		PSN_ID = PSN_ID_IN AND NTN_CS = NTN_CS_IN;
END
$$ LANGUAGE plpgsql;
-- END CLIENT FUNCTIONS
-- @ENDREGION

-- @REGION
-- HEALTHCARE PARTICIPANT FUNCTIONS

-- @FUNCTION
-- CREATE A HEALTHCARE PARTICIPANT ORGANIZATION
-- 
-- RETURNS: THE ID OF THE HEALTHCARE PARTICIPANT
CREATE OR REPLACE FUNCTION CRT_HC_PTCPT_ORG
(
	PTCPT_NAME_IN		IN VARCHAR(255),
	PTCPT_ADDR_SET_ID_IN	IN DECIMAL(20,0),
	PTCPT_WORK_TEL_IN	IN VARCHAR(255),
	PTCPT_TYP_CD_ID_IN	IN DECIMAL(20,0)

) RETURNS DECIMAL
AS
$$
DECLARE
	HC_PTCPT_ID_VAL		DECIMAL;
	HC_PTCPT_NAME_SET_ID	DECIMAL;

BEGIN
	HC_PTCPT_ID_VAL := nextval('HC_PTCPT_SEQ');
	HC_PTCPT_NAME_SET_ID := nextval('NAME_CMP_SEQ');

	-- INSERT THE NAME SET
	IF PTCPT_NAME_IN IS NOT NULL THEN
		PERFORM CRT_NAME_CMP(PTCPT_NAME_IN, 0, HC_PTCPT_NAME_SET_ID);
	ELSE
		HC_PTCPT_NAME_SET_ID = NULL;
	END IF;
	
	-- INSERT THE PARTICIPANT
	INSERT INTO HC_PTCPT_TBL (PTCPT_ID, PTCPT_CLS_CS, PTCPT_ADDR_SET_ID, PTCPT_NAME_SET_ID, PTCPT_TYP_CD_ID)
		VALUES (HC_PTCPT_ID_VAL, 'ORG', PTCPT_ADDR_SET_ID_IN, HC_PTCPT_NAME_SET_ID, PTCPT_TYP_CD_ID_IN);

	-- INSERT THE TELECOM
	IF PTCPT_WORK_TEL_IN IS NOT NULL THEN 
		INSERT INTO HC_PTCPT_TEL_TBL (TEL_USE, PTCPT_ID, TEL_VALUE)
			VALUES ('W', HC_PTCPT_ID_VAL, PTCPT_WORK_TEL_IN);
	END IF;
	
	RETURN HC_PTCPT_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A HEALTHCARE PARTICIPANT PERSON
-- 
-- RETURNS: THE ID OF THE HEALTHCARE PARTICIPANT
CREATE OR REPLACE FUNCTION CRT_HC_PTCPT_PSN
(
	PTCPT_NAME_SET_ID_IN	IN DECIMAL(20,0),
	PTCPT_ADDR_SET_ID_IN	IN DECIMAL(20,0),
	PTCPT_TEL_IN		IN VARCHAR(255),
	PTCPT_TYP_CD_ID_IN	IN DECIMAL(20,0)
) RETURNS DECIMAL
AS
$$
DECLARE
	HC_PTCPT_ID_VAL		DECIMAL;
BEGIN
	HC_PTCPT_ID_VAL := nextval('HC_PTCPT_SEQ');

	-- INSERT THE PARTICIPANT
	INSERT INTO HC_PTCPT_TBL (PTCPT_ID, PTCPT_CLS_CS, PTCPT_ADDR_SET_ID, PTCPT_NAME_SET_ID, PTCPT_TYP_CD_ID)
		VALUES (HC_PTCPT_ID_VAL, 'PSN', PTCPT_ADDR_SET_ID_IN, PTCPT_NAME_SET_ID_IN, PTCPT_TYP_CD_ID_IN);
		
	-- INSERT THE TELECOM
	IF PTCPT_TEL_IN != NULL THEN 
		INSERT INTO HC_PTCPT_TEL_TBL (TEL_USE, PTCPT_ID, TEL_VALUE)
			VALUES ('W', HC_PTCPT_ID_VAL, PTCPT_WORK_TEL_IN);
	END IF;
	
	RETURN HC_PTCPT_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- ADD A TELECOMMUNICATIONS ADDRESS TO A CLIENT
CREATE OR REPLACE FUNCTION ADD_HC_PTCPT_TEL
(
	PTCPT_ID_IN	IN DECIMAL(20,0),
	TEL_VALUE_IN	IN VARCHAR(255),
	TEL_USE_IN	IN VARCHAR(4)
) RETURNS VOID AS 
$$
BEGIN
	INSERT INTO HC_PTCPT_TEL_TBL (TEL_USE, PTCPT_ID, TEL_VALUE)
		VALUES (TEL_USE_IN, PTCPT_ID_IN, TEL_VALUE_IN);

	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL THE TELECOMMUNICATIONS ADDRESSES FOR A PROVIDER
CREATE OR REPLACE FUNCTION GET_HC_PTCPT_TEL
(
	PTCPT_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF HC_PTCPT_TEL_TBL AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM HC_PTCPT_TEL_TBL WHERE PTCPT_ID = PTCPT_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- LINKS A HEALTHCARE PARTICIPANT RECORD TO A HEALTH SERVICE RECORD
CREATE OR REPLACE FUNCTION LINK_HC_PTCPT
(
	HSR_ID_IN		IN DECIMAL(20,0),
	PTCPT_ID_IN		IN DECIMAL(20,0),
	PTCPT_CLS_IN		IN DECIMAL(6),
	PTCPT_REP_ORG_ID_IN	IN DECIMAL(20,0)	
) RETURNS VOID AS
$$
BEGIN
	INSERT INTO HSR_HC_PTCPT_TBL (HSR_ID, PTCPT_ID, PTCPT_CLS, PTCPT_REP_ORG_ID)
		VALUES (HSR_ID_IN, PTCPT_ID_IN, PTCPT_CLS_IN, PTCPT_REP_ORG_ID_IN);

	RETURN;
EXCEPTION 
	WHEN unique_violation THEN
		RAISE NOTICE 'CR003: ACTOR ALREADY PARTICIPATES IN THIS EVENT IN THIS ROLE';
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- LINKS A HEALTHCARE PARTICIPANT RECORD TO A HEALTH SERVICE RECORD
CREATE OR REPLACE FUNCTION ADD_LINK_HC_PTCPT_ORIG_ID
(
	HSR_ID_IN		IN DECIMAL(20,0),
	PTCPT_ID_IN		IN DECIMAL(20,0),
	PTCPT_CLS_IN		IN DECIMAL(6),
	ORIG_ID_DOMAIN_IN	IN VARCHAR(255),
	ORIG_ID_IN		IN VARCHAR(255),
	LICENSE_IND_IN		IN BOOLEAN
) RETURNS VOID AS
$$
BEGIN
	
	INSERT INTO HSR_HC_PTCPT_ORIG_ID_TBL (HSR_ID, PTCPT_ID, PTCPT_CLS, ORIG_ID_DOMAIN, ORIG_ID, LICENSE_IND)
		VALUES (HSR_ID_IN, PTCPT_ID_IN, PTCPT_CLS_IN, ORIG_ID_DOMAIN_IN, ORIG_ID_IN, LICENSE_IND_IN);

	RETURN;
EXCEPTION 
	WHEN unique_violation THEN
		RETURN;
END
$$ LANGUAGE plpgsql;


-- @PROCEDURE
-- UNLINK A HEALTHCARE PARTICIPANT RECORD FROM A HEALTH SERVICE RECORD
CREATE OR REPLACE FUNCTION UNLINK_HC_PTCPT
(
	HSR_ID_IN	IN DECIMAL(20,0),
	PTCPT_ID_IN	IN DECIMAL(20,0),
	PTCPT_CLS_IN	IN CHAR(6)
) RETURNS VOID AS
$$
BEGIN
	
	DELETE FROM HSR_HC_PTCPT_TBL 
		WHERE
			HSR_ID = HSR_ID_IN AND
			PTCPT_ID = PTCPT_ID_IN AND
			PTCPT_CLS = PTCPT_CLS_IN;

	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A HEALTHCARE PARTICIPANT BASED ON THE SHRID
CREATE OR REPLACE FUNCTION GET_HC_PTCPT
(
	PTCPT_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF HC_PTCPT_TBL AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM HC_PTCPT_TBL WHERE PTCPT_ID = PTCPT_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A HEALTHCARE PARTICIPANT BASED ON AN EXTERNAL IDENTIFIER
CREATE OR REPLACE FUNCTION GET_HC_PTCPT_EXTERN
(
	PTCPT_ID_DOMAIN_IN	IN VARCHAR(48),
	PTCPT_ID_IN		IN VARCHAR(48)
) RETURNS SETOF HC_PTCPT_TBL AS
$$
DECLARE
	PTCPT_SHRID	DECIMAL;
BEGIN
	-- GET THE PARTICIPANT SHRID
	SELECT PTCPT_ID INTO PTCPT_SHRID FROM HC_PTCPT_ALT_ID_TBL
		WHERE ALT_ID_DOMAIN = PTCPT_ID_DOMAIN_IN AND
			(PTCPT_ID_IN IS NOT NULL AND ALT_ID = PTCPT_ID_IN OR PTCPT_ID_IN IS NULL AND ALT_ID IS NULL);

	-- RETURN THE CLIENT DETAILS
	RETURN QUERY SELECT * FROM GET_HC_PTCPT(PTCPT_SHRID);
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL OF THE HEALTHCARE PARTICIPANTS LINKED TO THE CURRENT VERSION OF A HEALTH SERVICES EVENT
CREATE OR REPLACE FUNCTION GET_HSR_PTCPT
(
	HSR_ID_IN	IN DECIMAL(20,0), -- THE ID OF THE HSR EVENT
	PTCPT_ID_IN	IN DECIMAL(20,0), -- ID OF THE HC PARTICIPANT
	PTCPT_CLS_IN	IN DECIMAL(8,0) -- CLASSIFICATION OF THE PARTICIPATION
) RETURNS SETOF HSR_HC_PTCPT_VW
AS
$$
BEGIN
	-- GET THE CLIENTS ASSOCIATED WITH THIS
	RETURN QUERY SELECT * FROM HSR_HC_PTCPT_VW WHERE HSR_ID = HSR_ID_IN AND PTCPT_ID_IN = PTCPT_ID AND PTCPT_CLS_IN = PTCPT_CLS;
END;
$$ LANGUAGE plpgsql;


-- @PROCEDURE
-- CREATE AN ALTERNATIVE IDENTIFIER FOR THE CLIENT
CREATE OR REPLACE FUNCTION CRT_PTCPT_ALT_ID
(
	PTCPT_ID_IN		IN DECIMAL(20,0),
	ALT_ID_DOMAIN_IN	IN VARCHAR(255),
	ALT_ID_IN		IN VARCHAR(255)
) RETURNS VOID AS
$$
DECLARE 
	EXCEPTION_TEXT	TEXT;
BEGIN
	INSERT INTO HC_PTCPT_ALT_ID_TBL (ALT_ID_DOMAIN, PTCPT_ID, ALT_ID)
		VALUES (ALT_ID_DOMAIN_IN, PTCPT_ID_IN, ALT_ID_IN);
	RETURN;
EXCEPTION
	WHEN unique_violation THEN
		EXCEPTION_TEXT := 'CR002: ALTERNATE IDENTIFIER IN DOMAIN ' || ALT_ID_DOMAIN_IN || ' ALREADY REGISTERED';
		RAISE NOTICE '%', EXCEPTION_TEXT;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL ALTERNATE IDENTIFIERS FOR A HEALTHCARE PARTICIPANT
CREATE OR REPLACE FUNCTION GET_PTCPT_ALT_ID
(
	PTCPT_ID_IN	IN DECIMAL(20)
) RETURNS SETOF HC_PTCPT_ALT_ID_TBL AS
$$
BEGIN
	RETURN QUERY SELECT * FROM HC_PTCPT_ALT_ID_TBL WHERE PTCPT_ID = PTCPT_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- END HEALTHCARE PARTICIPANT FUNCTIONS
-- @ENDREGION 

-- @REGION 
-- SERVICE DELIVERY LOCATION FUNCTIONS



-- @FUNCTION
-- CREATE A SERVICE DELIVERY LOCATION
-- 
-- RETURNS: THE ID OF THE SERVICE DELIVERY LOCATION
CREATE OR REPLACE FUNCTION CRT_SDL
(
	SDL_NAME_IN		IN VARCHAR(255), -- NAME 
	SDL_ADDR_SET_ID_IN	IN DECIMAL(20,0),
	SDL_TYP_CD_ID_IN	IN DECIMAL(20,0)
) RETURNS DECIMAL
AS
$$
DECLARE
	SDL_ID_VAL		DECIMAL;
BEGIN
	SDL_ID_VAL := nextval('SDL_SEQ');

	-- INSERT THE SDL
	INSERT INTO SDL_TBL (SDL_ID, SDL_NAME, SDL_ADDR_SET_ID, SDL_TYP_CD_ID)
		VALUES (SDL_ID_VAL, SDL_NAME_IN, SDL_ADDR_SET_ID_IN, SDL_TYP_CD_ID_IN);

	RETURN SDL_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- PROCEDURE
-- UPDATES A SERVICE DELIVERY LOCATION REGISTRY RECORD WITH NEW DATA
CREATE OR REPLACE FUNCTION UPD_SDL
(
	SDL_ID_IN		IN DECIMAL(20,0), -- ID OF THE SERVICE DELIVERY LOCATION
	SDL_ADDR_SET_ID_IN	IN DECIMAL(20,0), -- THE NEW IDENTIFIER OF THE ADDRESS OF THE SDL
	SDL_TYP_CD_ID_IN	IN DECIMAL(20,0) -- THE NEW TYPE OF SDL
) RETURNS VOID AS 
$$
BEGIN

	-- PERFORM UPDATE
	UPDATE SDL_TBL SET SDL_ADDR_SET_ID = COALESCE(SDL_ADDR_SET_ID_IN, SDL_ADDR_SET_ID), 
		SDL_TYP_CD_ID = COALESCE(SDL_TYP_CD_ID_IN, SDL_TYP_CD_ID)
	WHERE
		SDL_ID = SDL_ID_IN;

	RETURN;
END;
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- LINKS A SERVICE DELIVERY LOCATION RECORD TO A HEALTH SERVICE RECORD
CREATE OR REPLACE FUNCTION LINK_SDL
(
	HSR_ID_IN		IN DECIMAL(20,0),
	SDL_ID_IN		IN DECIMAL(20,0),
	SDL_CLS_IN		IN DECIMAL(6)
) RETURNS VOID AS
$$

BEGIN
	
	INSERT INTO HSR_SDL_TBL (HSR_ID, SDL_ID, SDL_CLS)
		VALUES (HSR_ID_IN, SDL_ID_IN, SDL_CLS_IN);

	RETURN;
EXCEPTION
	WHEN unique_violation THEN
		RAISE NOTICE 'CR003: ACTOR ALREADY PARTICIPATES IN THIS EVENT IN THIS ROLE';
END
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- UNLINK A SERVICE DELIVERY LOCATION RECORD FROM A HEALTH SERVICE RECORD
CREATE OR REPLACE FUNCTION UNLINK_SDL
(
	HSR_ID_IN	IN DECIMAL(20,0),
	SDL_ID_IN	IN DECIMAL(20,0),
	SDL_CLS_IN	IN CHAR(6)
) RETURNS VOID AS
$$
BEGIN
	DELETE FROM HSR_SDL_TBL 
		WHERE
			HSR_ID = HSR_ID_IN AND
			SDL_ID = SDL_ID_IN AND
			SDL_CLS = SDL_CLS_IN;

	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A SERVICE DELIVERY LOCATION BASED ON THE SHRID
CREATE OR REPLACE FUNCTION GET_SDL
(
	SDL_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF SDL_TBL AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM SDL_TBL WHERE SDL_ID = SDL_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A SERVICE DELIVERY LOCATION BASED ON AN EXTERNAL IDENTIFIER
CREATE OR REPLACE FUNCTION GET_SDL_EXTERN
(
	SDL_ID_DOMAIN_IN	IN VARCHAR(48),
	SDL_ID_IN		IN VARCHAR(48)
) RETURNS SETOF SDL_TBL AS
$$
DECLARE
	SDL_SHRID	DECIMAL;
BEGIN
	-- GET THE PARTICIPANT SHRID
	SELECT SDL_ID INTO SDL_SHRID FROM SDL_ALT_ID_TBL
		WHERE ALT_ID_DOMAIN = SDL_ID_DOMAIN_IN AND
			(SDL_ID_IN IS NOT NULL AND ALT_ID = SDL_ID_IN OR SDL_ID_IN IS NULL AND ALT_ID IS NULL);

	-- RETURN THE CLIENT DETAILS
	RETURN QUERY SELECT * FROM GET_SDL(SDL_SHRID);
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL OF THE SERVICE DELIVERY LOCATIONS LINKED TO THE CURRENT VERSION OF A HEALTH SERVICES EVENT
CREATE OR REPLACE FUNCTION GET_HSR_SDLS
(
	HSR_ID_IN	IN DECIMAL(20,0) -- THE ID OF THE HSR EVENT
) RETURNS SETOF HSR_SDL_VW
AS
$$
BEGIN

	-- GET THE CLIENTS ASSOCIATED WITH THIS
	RETURN QUERY SELECT * FROM HSR_SDL_VW WHERE HSR_ID = HSR_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @PROCEDURE
-- CREATE AN ALTERNATIVE IDENTIFIER FOR THE SERVICE DELIVERY LOCATION
CREATE OR REPLACE FUNCTION CRT_SDL_ALT_ID
(
	SDL_ID_IN		IN DECIMAL(20,0),
	ALT_ID_DOMAIN_IN	IN VARCHAR(255),
	ALT_ID_IN		IN VARCHAR(255)
) RETURNS VOID AS
$$
BEGIN
	INSERT INTO SDL_ALT_ID_TBL (ALT_ID_DOMAIN, SDL_ID, ALT_ID)
		VALUES (ALT_ID_DOMAIN_IN, SDL_ID_IN, ALT_ID_IN);
	RETURN;
EXCEPTION
	WHEN unique_violation THEN
		RAISE NOTICE 'CR002: ALTERNATIVE IDENTIFIER ALREADY REGISTERED';
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET SDL ALTERNATIVE IDENTIFIERS
--
-- RETURNS: SET OF SDL_ALT_ID_TBL REPRESENTING THE ALTERNATE IDENTIFIERS FOR THE SPECIFIED SDL
CREATE OR REPLACE FUNCTION GET_SDL_ALT_ID
(
	SDL_ID_IN		IN DECIMAL(20,0)
) RETURNS SETOF SDL_ALT_ID_TBL AS
$$
BEGIN
	RETURN QUERY SELECT * FROM SDL_ALT_ID_TBL WHERE SDL_ID = SDL_ID_IN;
END
$$ LANGUAGE plpgsql;

-- END SERVICE DELIVERY LOCATION FUNCTIONS
-- @ENDREGION

-- @FUNCTION
-- CREATE A NEW HEALTH SERVICE RECORD
--
-- PURPOSE: CREATES THE HSR RECORD AND A PRIMARY VERSION FOR THE HSR 
--
-- RETURNS: THE ID OF THE HSR RECORD VERSION
CREATE OR REPLACE FUNCTION CRT_HSR
(
	HSR_CLS_IN		IN DECIMAL(4,0),
	EVT_TYP_CD_ID_IN	IN DECIMAL(20,0),
	REFUTED_IND_IN		IN BOOLEAN,
	EFFT_TS_SET_ID_IN	IN DECIMAL(20,0),
	STATUS_CS_IN		IN VARCHAR(10),
	AUT_UTC_IN		IN TIMESTAMPTZ,
	LANG_CS_IN		IN VARCHAR(10)
) RETURNS TABLE(
	VRSN_ID DECIMAL(20,0),
	ID  DECIMAL(20,0)
)
AS 
$$
DECLARE
	HSR_ID_VAL 	DECIMAL;
	HSR_VRSN_ID_VAL	DECIMAL;
BEGIN
	HSR_ID_VAL := nextval('HSR_SEQ');
	HSR_VRSN_ID_VAL := nextval('HSR_SEQ');
	INSERT INTO HSR_TBL (HSR_ID, HSR_CLS) VALUES (HSR_ID_VAL, HSR_CLS_IN);
	INSERT INTO HSR_VRSN_TBL (HSR_VRSN_ID, AUT_UTC, HSR_ID, EVT_TYP_CD_ID, REFUTED_IND, EFFT_TS_SET_ID, STATUS_CS, LANG_CS)
		VALUES (HSR_VRSN_ID_VAL, AUT_UTC_IN, HSR_ID_VAL, EVT_TYP_CD_ID_IN, REFUTED_IND_IN, EFFT_TS_SET_ID_IN, STATUS_CS_IN, LANG_CS_IN);
	RETURN QUERY SELECT HSR_VRSN_ID_VAL, HSR_ID_VAL;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- REVOKE THE HEALTH SERVICE EVENT
-- 
-- PURPOSE: REVOKES (OR OBSOLETES) THE HEALTH SERVICE RECORD
-- 
-- RETURNS: THE NEWEST VERSION ID OF THE HEALTH SERVICE EVENT
CREATE OR REPLACE FUNCTION DEL_HSR
(
	HSR_ID_IN	IN DECIMAL(20,0)
) RETURNS DECIMAL AS
$$
BEGIN
	RETURN (SELECT CRT_HSR_VRSN(HSR_ID_IN, NULL, NULL, NULL, 'Nullfied', NULL));
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET THE CURRENT HSR VERSION
-- 
-- RETURNS: THE CURERNT VERSION ID OF THE SPECIFIED HSR_ID
CREATE OR REPLACE FUNCTION GET_CUR_VRSN_ID
(
	HSR_ID_IN	IN DECIMAL(20,0) -- THE HSR ID FOR WHICH THE VERSION IS TO BE RETRIEVED
) RETURNS DECIMAL
AS
$$
BEGIN
	RETURN (SELECT HSR_VRSN_ID FROM GET_HSR_CRNT_VRSN(HSR_ID_IN));
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A NEW HEALTH SERVICE RECORD VERSION
-- 
-- PURPOSE: INSERTS A NEW HEALTH SERVICE RECORD VERSION INTO THE HSR_VRSN TABLE, DUPLICATES THE VERSION
--
-- RETURNS: THE IDENTIFIER OF THE NEW VERSION
CREATE OR REPLACE FUNCTION CRT_HSR_VRSN
(
	HSR_ID_IN		IN DECIMAL(20,0), -- THE HSR ID FOR WHICH THE NEW VERSION IS CREATED
	EVT_TYP_CD_ID_IN	IN DECIMAL(20,0), 
	REFUTED_IND_IN		IN BOOLEAN,
	EFFT_TS_SET_ID_IN	IN DECIMAL(20,0),
	STATUS_CS_IN		IN VARCHAR(10),
	AUT_UTC_IN		IN TIMESTAMPTZ,
	LANG_CS_IN		IN VARCHAR(10)
) RETURNS DECIMAL AS
$$
DECLARE
	HSR_CUR_VRSN_ID	DECIMAL;
	NEW_VRSN_ID	DECIMAL;
BEGIN
	-- GET THE CURRENT VERSION IDENTIFIER
	SELECT GET_CUR_VRSN_ID(HSR_ID_IN) INTO HSR_CUR_VRSN_ID;

	-- SANITY CHECK
	IF HSR_CUR_VRSN_ID IS NULL THEN
		RAISE EXCEPTION 'CR001: CANNOT INSERT VERSION FOR NON-EXISTANT HSR';
	END IF;
	
	-- GET THE NEW VERSION ID
	NEW_VRSN_ID := nextval('HSR_SEQ');
	
	-- DUPLICATE THE CURRENT VERSION RECORD INTO THE NEW VERSION RECORD
	INSERT INTO HSR_VRSN_TBL 
		SELECT 
			NEW_VRSN_ID,
			COALESCE(EVT_TYP_CD_ID_IN, EVT_TYP_CD_ID),
			CURRENT_TIMESTAMP, 
			COALESCE(AUT_UTC_IN, AUT_UTC),
			NULL,
			COALESCE(REFUTED_IND_IN, REFUTED_IND),
			COALESCE(EFFT_TS_SET_ID_IN, EFFT_TS_SET_ID),
			COALESCE(STATUS_CS_IN, STATUS_CS),
			COALESCE(LANG_CS_IN, LANG_CS),
			HSR_ID_IN,
			HSR_CUR_VRSN_ID
		FROM HSR_VRSN_TBL WHERE
			HSR_VRSN_ID = HSR_CUR_VRSN_ID;

	-- OBSOLETE THE OLD VERSION
	UPDATE HSR_VRSN_TBL SET OBSLT_UTC = CURRENT_TIMESTAMP
		WHERE HSR_VRSN_ID = HSR_CUR_VRSN_ID;

	-- RETURN NEW VERSION ID
	RETURN NEW_VRSN_ID;		
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET THE CURRENT VERSION OF AN HSR EVENT
-- 
-- RETURNS: A SET OF HSR_LTST_CRNT_VRSN_VW RECORDS REPRESENTING THE CURRENT VERSION
CREATE OR REPLACE FUNCTION GET_HSR_CRNT_VRSN
(
	HSR_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF HSR_LTST_CRNT_VRSN_VW AS
$$
BEGIN
	RETURN QUERY SELECT DISTINCT ON (hsr_tbl.hsr_id) hsr_vrsn_tbl.hsr_vrsn_id, hsr_vrsn_tbl.evt_typ_cd_id, hsr_vrsn_tbl.crtn_utc, hsr_vrsn_tbl.aut_utc, hsr_vrsn_tbl.obslt_utc, hsr_vrsn_tbl.refuted_ind, hsr_vrsn_tbl.efft_ts_set_id, hsr_vrsn_tbl.status_cs, hsr_vrsn_tbl.lang_cs, hsr_vrsn_tbl.hsr_id, hsr_vrsn_tbl.rplc_vrsn_id, hsr_tbl.hsr_cls
	   FROM hsr_vrsn_tbl 
	   INNER JOIN hsr_tbl USING (hsr_id)
	   WHERE hsr_tbl.hsr_id = hsr_id_in AND
	   obslt_utc IS NULL
	  ORDER BY hsr_tbl.hsr_id, hsr_vrsn_tbl.hsr_vrsn_id, hsr_vrsn_tbl.crtn_utc DESC;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL VERSIONS OF AN HSR EVENT
--
-- RETURNS: A SET OF HSR_VRSN_VW RECORDS REPRESENTING THE VERSIONS OF THE SPECIFIED HSR EVENT
CREATE OR REPLACE FUNCTION GET_HSR_VRSN
(
	HSR_ID_IN	IN DECIMAL(20,0),
	HSR_VRSN_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF HSR_VW AS
$$
BEGIN
	RETURN QUERY SELECT * FROM HSR_VW WHERE HSR_ID = HSR_ID_IN AND HSR_VRSN_ID = HSR_VRSN_ID_IN;
END
$$ LANGUAGE plpgsql;


-- @PROCEDURE 
-- CREATE A COMPONENT OF LINK BETWEEN TWO HSR EVENTS
CREATE OR REPLACE FUNCTION ADD_HSR_LNK
(
	CMP_HSR_ID_IN	IN DECIMAL(20,0), -- THE EVENT WHICH IS THE COMPONENT
	CBC_HSR_ID_IN	IN DECIMAL(20,0), -- THE COMPONENT WHICH IS BEING LINKED TO (CONTAINER)
	LNK_CLS_IN	IN DECIMAL(6,0), -- THE LINK CLASSFIICATION
	CONDUCTION_IN	IN BOOLEAN
) RETURNS VOID AS 
$$
BEGIN
	-- DOES THE TARGET ALREADY HAVE THIS LINK WITH ANOTHER DOC?
	IF((SELECT COUNT(*) FROM HSR_LNK_TBL WHERE HSR_ID = CBC_HSR_ID_IN AND LNK_CLS = LNK_CLS_IN) > 0) THEN
		RAISE EXCEPTION 'CR100: RECORD ALREADY HAS LINK OF SAME CLASS WITH A DIFFERENT DOCUMENT';
	END IF;
	
	-- INSERT THE LINK BETWEEN THE VERSION AND HSR EVENT ID
	INSERT INTO HSR_LNK_TBL(CMP_HSR_ID, HSR_ID, LNK_CLS, CONDUCTION)
		VALUES (CMP_HSR_ID_IN, CBC_HSR_ID_IN, LNK_CLS_IN, CONDUCTION_IN);
	RETURN;
EXCEPTION
	WHEN unique_violation THEN
		RAISE EXCEPTION 'CR006: DUPLICATE LINK, COMPONENT OR REPORT DETECTED';
END
$$ LANGUAGE plpgsql;


-- @REGION
-- COMPONENT FUNCTIONS

-- @PROCEDURE
-- REGISTER AN HSR COMPONENT (HELPS TO RE-CREATE THE HSR EVENT)
CREATE OR REPLACE FUNCTION CRT_COMP
(
	CNTR_TYP_IN	IN VARCHAR(255),
	CNTR_TBL_ID_IN	IN DECIMAL(20,0),
	CNTR_VRSN_ID_IN	IN DECIMAL(20,0),
	CMP_TYP_IN	IN VARCHAR(255),
	CMP_TBL_ID_IN	IN DECIMAL(20,0),
	CMP_VRSN_ID_IN	IN DECIMAL(20,0),
	CMP_ROL_TYP_IN	IN DECIMAL(6)
) RETURNS VOID AS
$$
BEGIN
	
	INSERT INTO CMP_TBL(CNTR_TYP, CNTR_TBL_ID, CNTR_VRSN_ID, CMP_TYP, CMP_TBL_ID, CMP_VRSN_ID, CMP_ROL_TYP)
		VALUES (CNTR_TYP_IN, CNTR_TBL_ID_IN, CNTR_VRSN_ID_IN, CMP_TYP_IN, CMP_TBL_ID_IN, CMP_VRSN_ID_IN, CMP_ROL_TYP_IN);
	RETURN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET ALL COMPONENTS FOR A PARTICULAR HSR EVENT VERSION
--
-- RETURNS: A SET OF COMPONENTS TO BE LOADED
CREATE OR REPLACE FUNCTION GET_COMPS
(
	CNTR_TYP_IN	IN VARCHAR(255),
	CNTR_TBL_ID_IN	IN DECIMAL(20,0),
	CNTR_VRSN_ID_IN	IN DECIMAL(20,0),
	INVRT_IN	IN BOOLEAN
) RETURNS SETOF CMP_TBL AS
$$
BEGIN
	IF INVRT_IN = FALSE THEN
		RETURN QUERY SELECT * FROM CMP_TBL 
			WHERE CNTR_TBL_ID = CNTR_TBL_ID_IN AND CNTR_TYP_IN = CNTR_TYP AND 
				(CNTR_VRSN_ID_IN IS NULL AND CNTR_VRSN_ID IS NULL OR 
				CNTR_VRSN_ID_IN = CNTR_VRSN_ID);
	ELSE
		RETURN QUERY SELECT CMP_ID, CMP_TYP AS CNTR_TYP, CMP_TBL_ID AS CNTR_TBL_ID, CNTR_VRSN_ID AS CNTR_VRSN_ID, CNTR_TYP AS CMP_TYP, CNTR_TBL_ID AS CMP_TBL_ID, CMP_VRSN_ID AS CMP_VRSN_ID, CAST(CMP_ROL_TYP + 1 AS NUMERIC(8,0)) AS CMP_ROL_TYP FROM CMP_TBL
			WHERE CMP_TBL_ID = CNTR_TBL_ID_IN AND CNTR_TYP_IN = CMP_TYP;
	END IF;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A PERSON MASKING INDICATOR
--
-- RETURNS : THE MASKING INDICATOR ID
CREATE OR REPLACE FUNCTION CRT_PSN_MSK_IND
(
	PSN_ID_IN	IN DECIMAL(20,0),
	PSN_VRSN_ID_IN	IN DECIMAL(20,0),
	MSK_CS_IN	IN VARCHAR(2)
) RETURNS DECIMAL AS 
$$
DECLARE
	MSK_ID_ID	DECIMAL(20,0);
BEGIN
	MSK_ID_ID := nextval('PSN_MSK_SEQ');
	INSERT INTO PSN_MSK_TBL (MSK_ID, MSK_CS, PSN_ID, EFFT_VRSN_ID)
		VALUES (MSK_ID_ID, MSK_CS_IN, PSN_ID_IN, PSN_VRSN_ID_IN);
	RETURN MSK_ID_ID;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- OBSOLETE A PERSON MASK
CREATE OR REPLACE FUNCTION OBSLT_PSN_MSK_IND
(
	MSK_ID_IN	IN DECIMAL(20,0),
	PSN_VRSN_ID_IN	IN DECIMAL(20,0)
) RETURNS VOID AS 
$$
BEGIN
	UPDATE PSN_MSK_TBL SET OBSLT_VRSN_ID = PSN_VRSN_ID_IN WHERE
		MSK_ID = MSK_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET MASKING INDICATOR
CREATE OR REPLACE FUNCTION GET_PSN_MSK_IND
(
	MSK_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF PSN_MSK_TBL AS 
$$ 
BEGIN
	RETURN QUERY SELECT * FROM PSN_MSK_TBL WHERE MSK_ID = MSK_ID_IN;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE AN EXTENSION OBJECT 
CREATE OR REPLACE FUNCTION CRT_EXT
(
	EXT_REP_IN	IN VARCHAR(3),
	EXT_TYP_IN	IN VARCHAR(255),
	EXT_DATA_IN	IN BYTEA, 
	EXT_NAME_IN	IN VARCHAR(32),
	EXT_PATH_IN	IN VARCHAR(255)
) RETURNS DECIMAL AS 
$$
DECLARE 
	EXT_KEY_ID_ID	DECIMAL;
	EXT_ID_ID	DECIMAL;
BEGIN

	-- KEY IDENTIFIER
	SELECT EXT_KEY_ID INTO EXT_KEY_ID_ID FROM EXT_KEY_TBL WHERE EXT_NAME = EXT_NAME_IN;
	IF (EXT_KEY_ID_ID IS NULL) THEN
		EXT_KEY_ID_ID := nextval('EXT_SEQ');
		INSERT INTO EXT_KEY_TBL (EXT_KEY_ID, EXT_NAME) VALUES (EXT_KEY_ID_ID, EXT_NAME_IN);
	END IF;

	-- NEXT WE NEXT THE NEXTNESS
	EXT_ID_ID := nextval('EXT_SEQ');
	INSERT INTO EXT_TBL (EXT_ID, EXT_REP, EXT_TYP, EXT_DATA, EXT_PATH, EXT_KEY) VALUES
		(EXT_ID_ID, EXT_REP_IN, EXT_TYP_IN, EXT_DATA_IN, EXT_PATH_IN, EXT_KEY_ID_ID);
	RETURN EXT_ID_ID;
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET AN EXTENSION 
CREATE OR REPLACE FUNCTION GET_EXT
(
	EXT_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF EXT_VW AS 
$$
BEGIN
	RETURN QUERY SELECT * FROM EXT_VW WHERE EXT_ID = EXT_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- CREATE A DEVICE
CREATE OR REPLACE FUNCTION CRT_DEV
(
	DEV_ROOT_IN	IN VARCHAR(255),
	DEV_EXT_IN	IN VARCHAR(255),
	DEV_NAME_IN	IN TEXT,
	DEV_JUR_IN	IN TEXT
) RETURNS DECIMAL AS $$
DECLARE 
	DEV_ID_ID	DECIMAL;
BEGIN
	SELECT DEV_ID INTO DEV_ID_ID FROM DEV_TBL WHERE DEV_ROOT = DEV_ROOT_IN AND DEV_EXT = DEV_EXT_IN;
	IF(DEV_ID_ID IS NOT NULL) THEN
		RETURN DEV_ID_ID;
	END IF;
	DEV_ID_ID := nextval('DEV_SEQ');
	INSERT INTO DEV_TBL (DEV_ID, DEV_ROOT, DEV_EXT, DEV_NAME, DEV_JUR) VALUES
		(DEV_ID_ID, DEV_ROOT_IN, DEV_EXT_IN, DEV_NAME_IN, DEV_JUR_IN);
	RETURN DEV_ID_ID;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- GET A DEVICE
CREATE OR REPLACE FUNCTION GET_DEV
(
	DEV_ID_IN	IN DECIMAL(20,0)
) RETURNS SETOF DEV_TBL AS $$
BEGIN
	RETURN QUERY SELECT * FROM DEV_TBL WHERE DEV_ID = DEV_ID_IN;
END;
$$ LANGUAGE plpgsql;

-- @TABLE
 -- NAME SYNONYMN TABLE 
 CREATE TABLE NAME_CMP_SYN_CDTBL
 (
	PRI_NAME	VARCHAR(255) NOT NULL,
	PRI_SOUNDEX	CHAR(4),
	SYN_NAME	VARCHAR(255) NOT NULL,
	STRENGTH	DECIMAL(4) NOT NULL,
	CONSTRAINT PK_NAME_CMP_SYN_CDTBL PRIMARY KEY (PRI_NAME, SYN_NAME)
 );

 -- @INDEX
 -- LOOKUP BY PRIMARY NAME
 CREATE INDEX NAME_CMP_SYN_PRI_IDX ON NAME_CMP_SYN_CDTBL(PRI_NAME);

 -- @INDEX
 -- LOOKUP BY SOUNDEX
 CREATE INDEX NAME_CMP_SYN_PRI_SOUNDEX_IDX ON NAME_CMP_SYN_CDTBL(PRI_SOUNDEX);

 -- @FUNCTION 
-- FIND NAME COMPONENTS WITH A SIMILAR SOUNDING PARTS
CREATE OR REPLACE FUNCTION FIND_NAME_CMP_LIKE (
	NAME_VALUE_IN		IN VARCHAR(256),
	NAME_CMP_CLS_IN		IN DECIMAL(4),
	NAME_MIN_MATCH_IN	IN DECIMAL(1)
) RETURNS TABLE 
(
	NAME_SET_ID 	DECIMAL,
	SCORE 		INT
) 
AS
$$
BEGIN
	RETURN QUERY SELECT NAME_CMP_TBL.NAME_SET_ID, DIFFERENCE(NAME_VALUE_IN, NAME_CMP_VALUE) FROM NAME_CMP_TBL 
		WHERE DIFFERENCE(NAME_VALUE_IN, NAME_CMP_VALUE) >= NAME_MIN_MATCH_IN AND
			NAME_CMP_CLS = NAME_CMP_CLS_IN;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- FIND NAME SETS
--
-- SOME PARAMETERS
--
--	NAME_MATCH_IN : THE DESIRED MATCHING STRENGTH (0 - 5)
--				5 	= USE EXACT STRING MATCHING
--				4 	= USE 100% SOUNDEX MATCHING
--				<3 	= USE < 75% SOUNDEX MATCHING
--
--	USE_VARIANTS_IN	: TRUE IF NAME VARIANTS SHOULD BE USED
--		WHEN NAME_MATCH_IN =
--				5	= NAME VARIANTS MUST BE EXACT MATCHES
--				4	= NAME VARIANTS USE 100% SOUNDEX MATCHES
CREATE OR REPLACE FUNCTION FIND_PSN_BY_NAME_SET(
	NAME_CMP_VAL_IN	IN VARCHAR[],
	NAME_CMP_CLS_IN IN DECIMAL[],
	NAME_MATCH_IN	IN DECIMAL,
	USE_VARIANTS_IN	IN BOOLEAN,
	NAME_SET_USE_IN	IN DECIMAL(20)
) RETURNS TABLE (PSN_ID DECIMAL(20,0)) AS
$$
DECLARE
	CNCMP			DECIMAL;
	TMP_NAME_RET_TBL	DECIMAL[];
	TMP_NAME_RES_TBL	DECIMAL[];
	T_SOUNDEX		CHAR(4);
BEGIN


	T_SOUNDEX := SOUNDEX(NAME_CMP_VAL_IN[1]);
	-- FILTER THE FIRST SET
	TMP_NAME_RET_TBL := ARRAY(SELECT A.NAME_SET_ID FROM NAME_CMP_TBL A INNER JOIN NAME_CDTBL ON (A.NAME_CMP_VALUE = NAME_CDTBL.NAME_ID)
		WHERE 
			(
			(NAME_MATCH_IN = 5 AND UPPER(NAME_VALUE) = UPPER(NAME_CMP_VAL_IN[1])) -- EXACT MATCH
				OR
				  -- MATCH ON SOUNDEX
			(NAME_MATCH_IN = 4 AND NAME_SOUNDEX = T_SOUNDEX) 
				OR
				  -- FUZZY SOUNDEX MATCH
			(NAME_MATCH_IN < 4 AND DIFFERENCE(NAME_CDTBL.NAME_VALUE, NAME_CMP_VAL_IN[1]) >= NAME_MATCH_IN)
				OR
				  -- EXACT MATCH ON VARIANT
			(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN = 5 AND NAME_CMP_CLS_IN[1] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_NAME = UPPER(NAME_CMP_VAL_IN[1])))
				OR
				  -- SOUNDEX MATCH ON VARIANT
			(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN = 4 AND NAME_CMP_CLS_IN[1] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_SOUNDEX = T_SOUNDEX AND STRENGTH >= 2))
				OR
				  -- FUZZY SOUNDEX MATCH ON VARIANT
			(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN < 4 AND NAME_CMP_CLS_IN[1] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_SOUNDEX = T_SOUNDEX AND STRENGTH >= NAME_MATCH_IN))

			) 
		AND -- SOUNDS LIKE PORTION
			NAME_CMP_CLS = NAME_CMP_CLS_IN[1]);

	-- SUBSEQUENT
	IF(ARRAY_LOWER(NAME_CMP_VAL_IN, 1) < ARRAY_UPPER(NAME_CMP_VAL_IN, 1)) THEN
		FOR CNCMP IN ARRAY_LOWER(NAME_CMP_VAL_IN, 1) + 1 .. ARRAY_UPPER(NAME_CMP_VAL_IN, 1) LOOP
			T_SOUNDEX := SOUNDEX(NAME_CMP_VAL_IN[CNCMP]);
			TMP_NAME_RET_TBL := ARRAY(
				SELECT A.NAME_SET_ID FROM NAME_CMP_TBL A INNER JOIN NAME_CDTBL ON (A.NAME_CMP_VALUE = NAME_CDTBL.NAME_ID)
				WHERE 
					(
					(NAME_MATCH_IN = 5 AND UPPER(NAME_VALUE) = UPPER(NAME_CMP_VAL_IN[CNCMP])) 
						OR
					(NAME_MATCH_IN = 4 AND NAME_SOUNDEX = T_SOUNDEX) 
						OR
					(NAME_MATCH_IN < 4 AND DIFFERENCE(NAME_CDTBL.NAME_VALUE, NAME_CMP_VAL_IN[CNCMP]) >= NAME_MATCH_IN)
						OR
					(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN = 5 AND NAME_CMP_CLS_IN[CNCMP] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_NAME = UPPER(NAME_CMP_VAL_IN[CNCMP])))
						OR
					(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN = 4 AND NAME_CMP_CLS_IN[CNCMP] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_SOUNDEX = T_SOUNDEX AND STRENGTH >= 3))
						OR
					(USE_VARIANTS_IN = TRUE AND NAME_MATCH_IN < 4 AND NAME_CMP_CLS_IN[CNCMP] = 1 AND UPPER(NAME_VALUE) IN (SELECT B.SYN_NAME FROM NAME_CMP_SYN_CDTBL B WHERE B.PRI_SOUNDEX = T_SOUNDEX AND STRENGTH >= NAME_MATCH_IN))
					)
				AND -- SOUNDS LIKE PORTION
					NAME_CMP_CLS = NAME_CMP_CLS_IN[CNCMP]
				AND 
					A.NAME_SET_ID = ANY (TMP_NAME_RET_TBL));

		END LOOP;
	END IF;
	
	RETURN QUERY SELECT PSN_NAME_SET_TBL.PSN_ID FROM PSN_NAME_SET_TBL WHERE 
		PSN_NAME_SET_TBL.NAME_SET_ID = ANY (TMP_NAME_RET_TBL) 
			AND
		(NAME_SET_USE_IN IS NOT NULL AND NAME_SET_USE = NAME_SET_USE_IN OR NAME_SET_USE_IN IS NULL) 
			AND
		OBSLT_VRSN_ID IS NULL;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- FIND A PERSON IDENTIFIER BY THE BIRTHTIME
CREATE OR REPLACE FUNCTION FIND_PSN_BY_BRTH_TS(
	TS_VALUE_IN	IN TIMESTAMPTZ,
	TS_PRECISION_IN	IN CHAR(1)
) RETURNS TABLE (PSN_ID DECIMAL(20,0)) AS
$$
DECLARE
	TS_PRECISION_IVL	INTERVAL;
BEGIN

	-- DETERMINE THE IVL
	IF TS_PRECISION_IN = 'Y' THEN
		TS_PRECISION_IVL = '1 YEAR'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'M' THEN
		TS_PRECISION_IVL = '1 MONTH'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'D' THEN
		TS_PRECISION_IVL = '1 DAY'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'H' THEN
		TS_PRECISION_IVL = '1 HOUR'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'm' THEN
		TS_PRECISION_IVL = '1 MINUTE'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'S' THEN
		TS_PRECISION_IVL = '1 SECOND'::INTERVAL;
	ELSIF TS_PRECISION_IN = 'F' THEN
		TS_PRECISION_IVL = '0 SECOND'::INTERVAL;
	END IF;

	-- EXECUTE QUERY
	RETURN QUERY SELECT PSN_VRSN_TBL.PSN_ID FROM 
		PSN_VRSN_TBL INNER JOIN TS_TBL ON (PSN_VRSN_TBL.BRTH_TS = TS_TBL.TS_ID) 
	WHERE 
		TS_VALUE BETWEEN TS_VALUE_IN AND TS_VALUE_IN + TS_PRECISION_IVL::INTERVAL - '1 MILLISECOND'::INTERVAL 
			AND 	
		PSN_VRSN_TBL.OBSLT_UTC IS NULL;
	
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- LOOKUP CANDIDATES BY GENDER CODE
CREATE OR REPLACE FUNCTION FIND_PSN_BY_GNDR_CS (
	GNDR_CS_IN	IN VARCHAR(2)
) RETURNS TABLE(PSN_ID DECIMAL(20,0)) AS 
$$
BEGIN
	RETURN QUERY SELECT PSN_VRSN_TBL.PSN_ID FROM PSN_VRSN_TBL WHERE GNDR_CS = GNDR_CS_IN AND OBSLT_UTC IS NULL;
END;
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- LOOKUP CANDIDATES BY TELECOM
CREATE OR REPLACE FUNCTION FIND_PSN_BY_TEL(
	TEL_VALUE_IN	IN VARCHAR(255),
	TEL_USE_IN	IN VARCHAR(32)
) RETURNS TABLE (PSN_ID DECIMAL(20,0)) AS 
$$
BEGIN
	RETURN QUERY SELECT PSN_TEL_TBL.PSN_ID FROM PSN_TEL_TBL WHERE OBSLT_VRSN_ID IS NULL AND TEL_VALUE = TEL_VALUE_IN AND
		(TEL_USE_IN IS NOT NULL AND TEL_USE = TEL_USE_IN OR TEL_USE_IN IS NULL);
END
$$ LANGUAGE plpgsql;

-- @FUNCTION
-- FIND ADDR SETS
--
CREATE OR REPLACE FUNCTION FIND_PSN_BY_ADDR_SET(
	ADDR_CMP_VAL_IN	IN VARCHAR[],
	ADDR_CMP_CLS_IN IN DECIMAL[],
	ADDR_SET_USE_IN	IN DECIMAL(20)
) RETURNS TABLE (PSN_ID DECIMAL(20,0)) AS
$$
DECLARE
	CNCMP			DECIMAL;
	TMP_ADDR_RET_TBL	DECIMAL[];
	TMP_ADDR_RES_TBL	DECIMAL[];
BEGIN


	-- FILTER THE FIRST SET
	TMP_ADDR_RET_TBL := ARRAY(SELECT A.ADDR_SET_ID FROM ADDR_CMP_TBL A INNER JOIN ADDR_CDTBL ON (A.ADDR_CMP_VALUE = ADDR_CDTBL.ADDR_ID)
		WHERE UPPER(ADDR_VALUE) = UPPER(ADDR_CMP_VAL_IN[1])
		AND 
			ADDR_CMP_CLS = ADDR_CMP_CLS_IN[1]);

	-- SUBSEQUENT
	IF(ARRAY_LOWER(ADDR_CMP_VAL_IN, 1) < ARRAY_UPPER(ADDR_CMP_VAL_IN, 1)) THEN
		FOR CNCMP IN ARRAY_LOWER(ADDR_CMP_VAL_IN, 1) + 1 .. ARRAY_UPPER(ADDR_CMP_VAL_IN, 1) LOOP
			TMP_ADDR_RET_TBL := ARRAY(
				SELECT A.ADDR_SET_ID FROM ADDR_CMP_TBL A INNER JOIN ADDR_CDTBL ON (A.ADDR_CMP_VALUE = ADDR_CDTBL.ADDR_ID)
				WHERE UPPER(ADDR_VALUE) = UPPER(ADDR_CMP_VAL_IN[CNCMP]) 
				AND 
					ADDR_CMP_CLS = ADDR_CMP_CLS_IN[CNCMP]
				AND 
					A.ADDR_SET_ID = ANY (TMP_ADDR_RET_TBL));

		END LOOP;
	END IF;
	
	RETURN QUERY SELECT PSN_ADDR_SET_TBL.PSN_ID FROM PSN_ADDR_SET_TBL WHERE 
		PSN_ADDR_SET_TBL.ADDR_SET_ID = ANY (TMP_ADDR_RET_TBL) 
			AND
		(ADDR_SET_USE_IN IS NOT NULL AND ADDR_SET_USE = ADDR_SET_USE_IN OR ADDR_SET_USE_IN IS NULL) 
			AND
		OBSLT_VRSN_ID IS NULL;
END;
$$ LANGUAGE plpgsql;

 -- INSERT SYNONYMN NAMES
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ABBIE','ABIGAIL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ABBY','ABIGAIL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ABE','ABRAHAM',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ABE','ABRAM',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ADA','ADALINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ADDY','ADALINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AGGY','AGATHA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AGGY','AGNES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AGGY','AUGUSTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AGGY','AUGUSTINA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALDO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALEXANDER',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALFONSE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALFRED',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALLAN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALLEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('AL','ALONZO',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ALEX','ALEXANDER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ALEX','ALEXANDRA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ALLIE','ALICE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ALLIE','ALICIA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ALLIE','ALMENA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANDY','ANDERSON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANDY','ANDREW',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ANTOINETTE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ANTONIA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ROSAENN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ROSAENNA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ROXANNE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANN','ROXANNA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANNIE','ANN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ANNIE','ANNE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ARA','ARABELLA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ARA','ARABELLE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ARCHIE','ARCHIBALD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ARLY','ARLENE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ART','ARTHUR',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BABS','BARBARA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BARBIE','BARBARA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BARNEY','BARNABAS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BARNEY','BERNARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BART','BARTHOLOMEW',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BEA','BEATRICE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BECCA','REBECCA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BECKY','REBECCA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLA','ARABELLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLA','ISABELLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLA','ROSABELLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLE','ARABELLA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLE','BELINDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLE','ISABEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLE','ISABELLE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BELLE','ROSABEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BEN','BENEDICT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BEN','BENJAMIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BENJY','BENJAMIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BENNIE','BENEDICT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERNY','BERNARD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','ALBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','DELBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','ELBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','GILBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','HERBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','HUBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BERT','NORBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BESS','ELIZABETH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BETH','ELIZABETH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BETSY','ELIZABETH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BETTY','ELIZABETH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BILL','ROBERT',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BILL','WILLIAM',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BILLY','ROBERT',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BILLY','WILLIAM',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BIRDIE','BERTHA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BIRDIE','ROBERTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BIRTIE','ROBERTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BOB','ROBERT',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BOBBIE','BARBARA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BOBBIE','ROBERTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BOBBY','ROBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BRAD','BRADFORD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('BRODY','BRODERICK',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CAL','CALVIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CAMMIE','CAMILE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CARL','CHARLES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CAROL','CAROLANN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CAROL','CAROLINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CASSIE','CAROLINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CASSIE','CASSANDRA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CASSIE','CATHERINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CASSIE','CATHLEEN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CATHY','CATHERINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CATHY','CATHLEEN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHARLIE','CHARLES',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHET','CHESTER',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','CHRISTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','CHRISTIAN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','CHRISTINA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','CHRISTINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','CHRISTOPHER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','KRISTEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','KRISTIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHRIS','KRISTY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CHUCK','CHARLES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CINDY','CINDERLLA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CINDY','CYNTHIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CLARA','CLARISSA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CLIFF','CLIFFORD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CLIFF','CLIFTON',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CONNIE','CONSTANCE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CRISSY','CHRINTINA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CRISSY','CHRINTINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CURT','CURTIS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('CY','CYRUS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DAN','DANIEL',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DANNY','DANIEL',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DAVE','DAVID',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DAVEY','DAVID',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEB','DEBORAH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEB','DEBRA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEBBIE','DEBORAH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEBBIE','DEBRA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEE','DELORES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DEL','DELBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DELLA','DELORES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DENNIE','DENNIS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DENNIS','DENNISON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DENNY','DENNIS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DICK','RICHARD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOLLY','DOROTHY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOM','DOMENIC',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOM','DOMINICO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DON','DONALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DON','DONATO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DONNIE','DONALD',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DONNY','DONALD',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DORA','DOROTHY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DORA','ELDORA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DORA','ISADORA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOT','DOROTHY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOTTIE','DOROTHY',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DOTTY','DOROTHY',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('DREW','ANDREW',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDGAR',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDMOND',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDMUND',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDUARDO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDWARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ED','EDWIN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDGAR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDMOND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDMUND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDUARDO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDWARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDIE','EDWIN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDGAR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDMOND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDMUND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDUARDO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDWARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDDY','EDWIN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDIE','EDITH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDIE','EDYTH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDIE','EDYTHE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDYE','EDYTH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EDYE','EDYTHE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ELAINE','ELEANOR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ELLA','GABRIELLA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ELLEN','ELEANOR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EMILY','AMELIA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EMILY','EMELINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EMMA','EMELINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EMMA','EMILY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('EVE','GENEVIEVE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FAY','FAITH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FLO','FLORENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FLORA','FLORENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRAN','FRANCES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRAN','FRANCINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRAN','FRANCIS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANCIE','FRANCES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANCIE','FRANCINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANK','FRANCIS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANK','FRANKLIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANKIE','FRANCIS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANNIE','FRANCES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANNIE','FRANCINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANNY','FRANCES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRANNY','FRANCINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRED','ALFRED',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRED','FERDINAND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRED','FREDERICK',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRED','FRIEDA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FRED','WINNIFRED',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDA','ALFREDA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDA','FREDERICKA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDIE','FERDINAND',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDIE','FREDERICK',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDIE','FRIEDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDIE','WINNIFRED',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDY','ALFREDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDY','FERDINAND',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDY','FREDERICK',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDY','FRIEDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('FREDDY','WINNIFRED',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GABBY','GABRIELLA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GABBY','GABRIELLE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GABE','GABRIEL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GAIL','ABIGAIL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GENE','EUGENE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GEOFF','GEOFFREY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GEOFF','JEFFREY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GEORGE','GEORGINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GERRIE','GERALDINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GERRY','GERALD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GERRY','GERALDINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GERTIE','GERTRUDE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GIL','GILBERT',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GINA','REGINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GRETTA','MARGARETTA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GUS','AUGUSTINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GUS','AUGUSTUS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('GWEN','GWENDOLYN',4);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HAL','HAROLD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HAL','HENRY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HANK','HENRY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HANNAH','JOHANNAH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HARRY','HAROLD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HARRY','HENRY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HATTIE','HARRIET',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HENNY','HENRIETTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HERB','HERBERT',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HETTY','HESTER',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HIPSIE','HIPSBIBAH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('HUGH','HUBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('IGGY','IGNATIUS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ISSY','ISABEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ISSY','ISABELLA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ISSY','ISABELLE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ISSY','ISADORA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('IZZY','ISADORE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JAKE','JACOB',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JAMIE','BENJAMIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JAMIE','JAMES',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JAN','JANET',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JAY','JACOB',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JEAN','GENEVIEVE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JEB','JEBADIAH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JEFF','GEOFFREY',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JEFF','JEFFERSON',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JEFF','JEFFREY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JENNIE','JENNIFER',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JENNY','JENNIFER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JENNY','GENEVIEVE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JERRY','GERALD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JERRY','GERALDINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JERRY','JEREMIAH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JESSIE','JESSICA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JIM','JAMES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JIMMIE','JAMES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JIMMY','JAMES',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOAN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOANN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOANNA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOANNE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOHANNA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOHANNAH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JO','JOSOPHINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JODY','JOSEPH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOE','JOSEPH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOE','JOSHUA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOEY','JOSEPH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOEY','JOSOPHINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOHN','JOHANN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOHN','JONATHAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JON','JONATHAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOSEY','JOSOPHINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOSH','JOSHUA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JOY','JOYCE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JUDY','JUDITH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('JULIE','JULIA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATE','KATELIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATE','KATELYN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATE','KATHERINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATHY','KATHERINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATHY','KATHLEEN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATHY','KATHRYN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATY','KATHERINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KATY','KATHLEEN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAY','KATELIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAY','KATELYN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAY','KATHERINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAYE','KATELIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAYE','KATELYN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KAYE','KATHERINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KEN','KENNETH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KENNY','KENNETH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KIM','KIMBERLEY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('KIM','KIMBERLY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LARRY','LAURENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LARRY','LAWRENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LEE','ELIAS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','AILEEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','ARLENE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','CATHLEEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','DARLENE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','KATHLEEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENA','MAGDELINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LENNY','LEONARD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LEO','LEONARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LEON','LEONARD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LEON','NAPOLEON',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LES','LESTER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LIBBY','ELIZABETH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LILLY','LILLIAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LINDA','BELINDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LINDA','MELINDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LISA','MELISSA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LIZ','ELIZABETH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LIZZIE','ELIZABETH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LOIS','LOUISE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LORIE','LORETTA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LORIE','LORRAINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LOU','LOUIS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LOU','LOUISE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LOU','LUCINDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LUCY','LUCINDA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LUKE','LUCAS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LUKE','LUCIAS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LYNN','CAROLINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('LYNN','CAROLYN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADDY','MADELINE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADDY','MADELYN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADGE','MAGDELINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADGE','MARGARETTA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADIE','MADELINE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MADIE','MADELYN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MAGGIE','MADELINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MAGGIE','MAGDELINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MAGGIE','MARGARET',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MAGGY','MARGARET',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MANDY','AMANDA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGE','MARGARET',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGE','MARGARETTA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGIE','MARGARET',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGIE','MARJORIE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGY','MARGARET',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARGY','MARJORIE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARK','MARCUS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARTY','MARTIN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MARV','MARVIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MATT','MATHEW',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MATT','MATTHEW',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MAUD','MADELINE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MEL','MELINDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MEL','MELISSA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MERV','MERVIN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MICK','MICHAEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MICKEY','MICHAEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MIKE','MICHAEL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MINDY','MELINDA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MINNIE','WILHELMINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MISSY','MELISSA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MITCH','MITCHELL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('MONTY','LAMONT',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NAT','NATHANIEL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NATE','NATHAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NATE','NATHANIEL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NATHAN','JONATHAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NEIL','CORNELIUS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NEWT','NEWTON',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NICK','NICHOLAS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NICKIE','NICHOLAS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NORA','ELEANOR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('NORA','LENORA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('OBIE','OBEDIAH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('OLLIE','OLIVER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('OZZY','OSWALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PAT','PATRICIA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PAT','PATRICK',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PATSY','PATRICIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PATTY','PATRICIA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PEGGY','MARGARET',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PENNY','PENELOPE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PETE','PETER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PHIL','PHILIP',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PHIL','PHILLIP',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('POLLY','PAULINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PRISSY','PRISCILLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('PRUDY','PRUDENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RANDY','RANDOLPH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RAY','RAYMOND',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('REBA','REBECCA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('REGGIE','REGINALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RENA','IRENE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICH','ALDRICH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICH','RICHARD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICHIE','ALDRICH',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICHIE','RICHARD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICK','DERICK',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICK','RICARDO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICK','RICHARD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICKY','BRODERICK',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICKY','DERICK',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RICKY','RICHARD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROB','ROBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROB','ROBERTO',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROBBY','ROBERT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROD','BRODERICK',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RON','AARON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RON','RONALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RON','VERONICA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RONNIE','AARON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RONNIE','RONALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RONNIE','VERONICA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RONNY','RONALD',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RONNY','VERONICA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROSABEL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROSABELLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROSALYN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROSEANN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROSEANNA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROXANNA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROSE','ROXANNE',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROZ','ROSABEL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROZ','ROSABELLA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ROZ','ROSALYN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RUBE','REUBEN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RUDY','RUDOLPH',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RUSS','RUSSELL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('RUSTY','RUSSELL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SAL','SOLOMON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SAM','SAMUEL',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SAMMY','SAMUEL',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SANDRA','CASSANDRA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SANDY','CASSANDRA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SANDY','SANDRA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SCOTT','PRESCOTT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SCOTTY','PRESCOTT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SHELLY','MICHELLE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SHELLY','RACHEL',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SHELLY','SHELTON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SHERRY','SHIRLEY',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SLY','SYLVESTER',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('STELLA','ESTELLA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('STEPH','STEPHEN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('STEPH','STEVEN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('STEVE','STEPHEN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('STEVE','STEVEN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SUE','SUSAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SUE','SUSANNAH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SULLY','SULLIVAN',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SUSIE','SUSAN',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('SUSIE','SUSANNAH',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TABBY','TABITHA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TED','THEODORE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TEDDY','THEODORE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TERRY','TERENCE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESS','TERESA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESS','THERESA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESSA','TERESA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESSA','THERESA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESSIE','TERESA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TESSIE','THERESA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('THAD','THADDEUS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('THEO','THEODORE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('THOM','THOMAS',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TILLA','MATILDA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TIM','TIMOTHY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TIMMY','TIMOTHY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TINA','AUGUSTINA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TINA','CHRISTINA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TINA','MARTINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TISH','LATISHA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TISH','TISHA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TISHA','LATISHA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TOBY','TOBIAS',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TOM','THOM',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TOM','THOMAS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TOMMY','THOM',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TOMMY','THOMAS',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TONY','ANTHONY',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TONY','SHELTON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TORI','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TORIE','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TORRI','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TORRIE','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TORY','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TRISHA','PATRICIA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TRIXIE','BEATRICE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('TRUDY','GERTRUDE',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VAL','VALERI',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VAL','VALERIE',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VAN','SULLIVAN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VANNA','VANESSA',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VIC','VICTOR',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VIC','VINCENT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VIC','VINCENZON',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VICKI','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VICKIE','VICTORIA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VICKY','VICTORIA',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VIN','VINCENT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VIN','VINCENZO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VINCE','VINCENT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VINCE','VINSON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VINNIE','VINCENT',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('VINNIE','VINCENZO',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WALDO','OSWALD',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WENDY','GWENDOLYN',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILBER','GILBERT',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILL','WILBUR',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILL','WILLIAM',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILL','WILSON',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILLIE','WILBUR',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILLIE','WILLIAM',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILLIE','WILSON',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WILMA','WILHELMINA',2);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WINNIE','WINNIFRED',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WINNY','WINNIFRED',3);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('WOODY','ELWOOD',1);
INSERT INTO NAME_CMP_SYN_CDTBL (PRI_NAME, SYN_NAME, STRENGTH) VALUES ('ZACH','ZACHARIAH',3);

INSERT INTO NAME_CMP_SYN_CDTBL (SELECT SYN_NAME, NULL, PRI_NAME, STRENGTH FROM NAME_CMP_SYN_CDTBL);
UPDATE NAME_CMP_SYN_CDTBL SET STRENGTH = STRENGTH + 1 WHERE STRENGTH < 3;
UPDATE NAME_CMP_SYN_CDTBL SET PRI_SOUNDEX = SOUNDEX(PRI_NAME);

