using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MARC.HI.EHRS.SVC.Messaging.Everest.Configuration;
using System.Reflection;
using MARC.Everest.Connectors;
using MARC.HI.EHRS.SVC.Config.Messaging.Forms.Configurators;
using System.Threading;

namespace MARC.HI.EHRS.SVC.Config.Messaging.Forms
{
    public partial class frmEditListener : Form
    {

        /// <summary>
        /// A class that can be used to configure a connector
        /// </summary>
        public class ConnectorConfigurator : UserControl
        {
            /// <summary>
            /// Gets or sets the connection string
            /// </summary>
            public virtual string ConnectionString { get; set; }

            /// <summary>
            /// Get the type that this configurator edits
            /// </summary>
            public virtual string HandlesType
            { 
                get { return null; }
            }

            /// <summary>
            /// Commit any changes
            /// </summary>
            public virtual void Commit() { }
        }

        /// <summary>
        /// Configurators
        /// </summary>
        private List<ConnectorConfigurator> m_configurators = new List<ConnectorConfigurator>();

        /// <summary>
        /// Listener
        /// </summary>
        private ListenConfiguration m_listener;

        /// <summary>
        /// Gets or sets the configuration for this listener
        /// </summary>
        public ListenConfiguration Listener
        {
            get
            {
                return m_listener;
            }
            set
            {
                m_listener = value;

                if (value == null) return;

                lbllsnName.Text = new TypeInfo() { Type = value.ConnectorType }.ToString();

                if(value.ConnectorType != null)
                    for (int i = 0; i < cboListener.Items.Count; i++)
                        if ((cboListener.Items[i] as TypeInfo).Type.FullName.Equals(value.ConnectorType.FullName))
                            cboListener.SelectedIndex = i;
            }
        }

        public frmEditListener()
        {
            InitializeComponent();
            BindDataFields();
        }

        /// <summary>
        /// Scan for available assemblies and populate text box fields
        /// </summary>
        private void BindDataFields()
        {

            foreach (Assembly asm in ConfigHelper.m_environmentConfig.ServiceAssemblies)
            {
                // Is this an assembly we can use for a revision? (Must have a type that was generated by gpmr)
                Type[] connectorTypes = Array.FindAll<Type>(asm.GetTypes(), o => o.IsClass && o.GetInterface(typeof(IListenWaitConnector).FullName) != null);
                foreach (var t in connectorTypes)
                    cboListener.Items.Add(new TypeInfo() { Type = t });
            }

            // Load all configurators
            foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())
                foreach (var tc in Array.FindAll<Type>(asm.GetTypes(), o => o.BaseType != null && o.BaseType.Equals(typeof(ConnectorConfigurator))) ?? new List<Type>().ToArray())
                {
                    ConstructorInfo ci = tc.GetConstructor(Type.EmptyTypes);
                    if (ci != null)
                        m_configurators.Add(ci.Invoke(null) as ConnectorConfigurator);
                }

        }

        /// <summary>
        /// Show an edit revision
        /// </summary>
        internal static DialogResult EditListener(ListenConfiguration lsnr)
        {

            frmEditListener frmEdit = new frmEditListener();
            frmEdit.Listener = lsnr;
            return frmEdit.ShowDialog();
        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            (pnlConfig.Controls[0] as ConnectorConfigurator).Commit();
            m_listener.ConnectorType = (cboListener.SelectedItem as TypeInfo).Type;
            m_listener.ConnectionString = (pnlConfig.Controls[0] as ConnectorConfigurator).ConnectionString;
            m_listener.Mode = ListenConfiguration.ModeType.ListenWaitRespond;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void cboListener_SelectedIndexChanged(object sender, EventArgs e)
        {
            pnlConfig.Controls.Clear();
            Type cType = (cboListener.SelectedItem as TypeInfo).Type;
            // Locate an editor
            ConnectorConfigurator cc = m_configurators.Find(o => o.HandlesType != null && o.HandlesType.Equals(cType.FullName));
            if (cc == null)
                pnlConfig.Controls.Add(new ucBasicConfigurator() { ConnectionString = m_listener.ConnectionString });
            else
            {
                pnlConfig.Controls.Add(cc);
                cc.ConnectionString = m_listener.ConnectionString;
            }

        }
    }
}
