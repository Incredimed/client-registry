using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Reflection;
using System.CodeDom.Compiler;
using MARC.Everest.Connectors;
using System.Threading;
using MARC.HI.EHRS.SVC.Messaging.Everest.Configuration;

namespace MARC.HI.EHRS.SVC.Config.Messaging.Forms
{
    public partial class frmEditRevision : Form
    {


        /// <summary>
        /// Revision
        /// </summary>
        private RevisionConfiguration m_revision;

        /// <summary>
        /// Revision configuration
        /// </summary>
        public RevisionConfiguration Revision
        {
            get
            {
                return m_revision;
            }
            set
            {
                
                m_revision = value;

                if (value == null) return;

                txtRevName.Text = value.Name;
                chkValidate.Checked = value.ValidateInstances;
                lblRevName.Text = String.Format("Revision {0}", value.Name);

                
                for (int i = 0; i < cboDTFormatter.Items.Count; i++)
                {
                    if ((cboDTFormatter.Items[i] as TypeInfo).Type.Equals(value.GraphAide))
                        cboDTFormatter.SelectedIndex = i;
                    if ((cboFormatter.Items[i] as TypeInfo).Type.Equals(value.Formatter))
                        cboFormatter.SelectedIndex = i;
                }

                if(value.Assembly != null)
                    for (int i = 0; i < cboRevision.Items.Count; i++)
                        if ((cboRevision.Items[i] as AssemblyInfo).Assembly.GetName().Name.Equals(value.Assembly.GetName().Name))
                            cboRevision.SelectedIndex = i;
            }
        }

        /// <summary>
        /// ctor
        /// </summary>
        public frmEditRevision()
        {
            InitializeComponent();

            // Bind the data fields
            BindDataFields();
        }

        /// <summary>
        /// Scan for available assemblies and populate text box fields
        /// </summary>
        private void BindDataFields()
        {

            foreach (Assembly asm in ConfigHelper.m_environmentConfig.ServiceAssemblies)
            {
                // Is this an assembly we can use for a revision? (Must have a type that was generated by gpmr)
                if (Array.Find<Type>(asm.GetTypes(), o => o.GetCustomAttributes(typeof(GeneratedCodeAttribute), true).Length > 0) != null)
                    cboRevision.Items.Add(new AssemblyInfo() { Assembly = asm });
                // Otherwise, find all the formatters
                Type[] formatterTypes = Array.FindAll<Type>(asm.GetTypes(), o => o.IsClass && o.GetInterface(typeof(IStructureFormatter).FullName) != null);
                foreach (var t in formatterTypes)
                {
                    cboDTFormatter.Items.Add(new TypeInfo() { Type = t });
                    cboFormatter.Items.Add(new TypeInfo() { Type = t });
                }
            }

        }

        /// <summary>
        /// Show an edit revision
        /// </summary>
        internal static DialogResult EditRevision(RevisionConfiguration rev)
        {

            frmEditRevision frmEdit = new frmEditRevision();
            frmEdit.Revision = rev;
            return frmEdit.ShowDialog();
        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            m_revision.Assembly = (cboRevision.SelectedItem as AssemblyInfo).Assembly;
            m_revision.Formatter = (cboFormatter.SelectedItem as TypeInfo).Type;
            m_revision.GraphAide = (cboDTFormatter.SelectedItem as TypeInfo).Type;
            m_revision.ValidateInstances = chkValidate.Checked;
            m_revision.Name = txtRevName.Text;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }
    }
}
